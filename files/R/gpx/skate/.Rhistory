stat_summary(fun.y="mean", size=1, geom="point")
}
statSd <- function(...) {
stat_summary(fun.data="mean_sdl", fun.args = list(mult = 1), geom="errorbar", width=0.1)
}
hm_color <- function(...) {
scale_fill_gradientn(colours=tim.colors(64))
}
hm_redblue <- function(steps = 11) {
# http://www.sthda.com/french/wiki/couleurs-dans-r
scale_fill_gradientn(colours=brewer.pal(n = steps, name = "RdBu"))
}
orderX <- function(vector) {
scale_x_discrete(limits = vector)
}
geom_histogram_line <- function(bins = bins) {
# set color in ggplot
stat_bin(geom = "line", position = "dodge", bins = bins)
}
theme_set(theme_bw())
theme_Publication <- function(base_size=14, base_family="helvetica") {
(theme_foundation(base_size=base_size, base_family=base_family)
+ theme(plot.title = element_text(face = "bold",
size = rel(1.2), hjust = 0.5),
text = element_text(),
panel.background = element_rect(colour = NA),
plot.background = element_rect(colour = NA),
panel.border = element_rect(colour = NA),
axis.title = element_text(face = "bold",size = rel(1)),
axis.title.y = element_text(angle=90,vjust =2),
axis.title.x = element_text(vjust = -0.2),
axis.text = element_text(),
axis.line = element_line(colour="black"),
axis.ticks = element_line(),
panel.grid.major = element_line(colour="#f0f0f0"),
panel.grid.minor = element_blank(),
legend.key = element_rect(colour = NA),
legend.position = "bottom",
legend.direction = "horizontal",
legend.key.size= unit(0.2, "cm"),
legend.margin = unit(0, "cm"),
legend.title = element_text(face="italic"),
plot.margin=unit(c(10,5,5,5),"mm"),
strip.background=element_rect(colour="#f0f0f0",fill="#f0f0f0"),
strip.text = element_text(face="bold")
))
}
DecimalToToD <- function(x) {
require(hms)
hms::as_hms(x)
}
ToDToDecimal <- function(x) {
period_to_seconds(lubridate::hms(x))
}
str_extract_all_bind <- function(variable, pattern) {
# source : https://stackoverflow.com/a/66910086/2444948
return(apply(str_extract_all(variable, pattern, simplify = T), 1, paste, collapse=" "))
}
sleepbar <- function(times) {
# Initializes the progress bar
pb <- txtProgressBar(min = 0,      # Minimum value of the progress bar
max = times, # Maximum value of the progress bar
style = 3,    # Progress bar style (also available style = 1 and style = 2)
width = 50,   # Progress bar width. Defaults to getOption("width")
char = "=")   # Character used to create the bar
for(i in 1:times) {
Sys.sleep(1)
setTxtProgressBar(pb, i)
}
close(pb)
}
expand.table <- function(DATA, expand.vector, name.new.variable) {
debug.easy(length(name.new.variable) != 1, "'name.new.variable' should be length 1.")
DATAnew <- data.table()
for(i in seq_along(expand.vector) ) {
DATA2 <- copy(DATA)
DATA2[, new := expand.vector[i]]
setnames(DATA2, "new", name.new.variable)
DATAnew <- rbind(DATAnew, DATA2)
}
return(DATAnew)
}
error <- function() {
cat(bgRed("      ┌──────────────────────────────────────────────────────────────────────────────┐\n"))
cat(bgRed("      │                                                                              │\n"))
cat(bgRed("      │       *** ******     ***    *** * ***                 *********        *     │\n"))
cat(bgRed("      │       *              *  *   *      **     *******        *    *        *     │\n"))
cat(bgRed("      │      ******          ****    *******    **      **       ******        *     │\n"))
cat(bgRed("      │      *               * ***   *   **     *        *       *** *         *     │\n"))
cat(bgRed("      │      *               *   *** *    ***    *      **       *    ***      *     │\n"))
cat(bgRed("      │      *****           *       *      **    ******         *      *            │\n"))
cat(bgRed("      │                                                                         *    │\n"))
cat(bgRed("      └──────────────────────────────────────────────────────────────────────────────┘\n"))
}
create.dir<-function (wd, newdir, newwd) {
#' Create directory, set working directory and keep path as object
#'
#' @param wd Source directory where to create your directory
#' @param newdir Name of your new directory (string)
#' @param newwd Name of the object storing the path of the new directory (string)
#' @return The sum of \code{x} and \code{y}
#' @examples
#' create.dir(wd, "Output_client", "wdout")
dir.create(file.path(wd, newdir), showWarnings = FALSE)
assign(newwd, file.path(wd, newdir, "/"), envir = .GlobalEnv)
setwd(get(newwd))
}
leading0 <- function ( vect, digits ) {
if( !is.numeric(vect) ){
# cat("", bgMagenta("[DEBUG]"), " - Your vector should be numeric.")
vect <- sprintf(paste0("%0", digits, "d"), as.numeric(vect))
} else {
vect <- sprintf(paste0("%0", digits, "d"), vect)
}
return(vect)
}
p0 <- function(...) {
return(paste0(...))
}
rP <- function(path) {
path <- gsub("%20", " ", path)
path <- gsub("file:///", "", path)
return(path)
}
debug.easy <- function(logical, message, toprint) {
if( logical ) {
if( !missing(toprint) ) {
print(toprint)
}
stop(cat("", bgMagenta("[DEBUG]"), " - ", message, "\n"))
}
}
bi <- function(v1, v2) {
return(paste0(v1, " | ", v2))
}
grepcol <- function(pattern, data, rev=F) {
if( length(pattern) == 1) {
if( rev ) {
a <- names(data)[!grepl(pattern, names(data))]
} else {
a <- names(data)[grepl(pattern, names(data))]
}
} else {
if( rev ) {
a <- names(data)[!names(data) %in% pattern]
} else {
a <- names(data)[names(data) %in% pattern]
}
}
return( a )
}
get.name.Robject <- function(month) {
deparse(match.call()$month)
}
# setup
rm(list = ls())
rootpath <- 'C:/Users/doria/Downloads/GitHub/dorian.gravier.github.io/files/R/'
# Sys.setlocale('LC_ALL', 'German')
source(paste0(rootpath, 'BM_Function_v01.r'), encoding='utf-8')
library(httr)
library(rvest)
library(tibble)
library(rgdal)
library(sf)
library(concaveman)
# setup
rm(list = ls())
rootpath <- 'C:/Users/doria/Downloads/GitHub/dorian.gravier.github.io/files/R/'
# Sys.setlocale('LC_ALL', 'German')
source(paste0(rootpath, 'BM_Function_v01.r'), encoding='utf-8')
library(httr)
library(rvest)
library(tibble)
library(rgdal)
library(sf)
library(concaveman)
data <- data.table()
lcsv <- list.files(rP("file:///C:/Users/doria/Downloads/test/P4N_csv/"), full.names = T, pattern = "P4N")
lcsv
for (i in seq_along(lcsv)) {
temp <- data.table(read.csv(rP(lcsv[i]), sep = ",", encoding = "UTF-8", header = F))
data <- rbind(data, temp)
}
data <- data.table()
lcsv <- list.files(rP("file:///C:/Users/doria/Downloads/test/P4N_csv/"), full.names = T, pattern = "P4N")
lcsv
for (i in seq_along(lcsv)) {
temp <- data.table(read.csv(rP(lcsv[i]), sep = ",", encoding = "UTF-8", header = F))
data <- rbind(data, temp)
}
lcsv
i=1
temp <- data.table(read.csv(rP(lcsv[i]), sep = ",", encoding = "UTF-8", header = F))
temp
data <- data.table()
lcsv <- list.files(rP("file:///C:/Users/doria/Downloads/test/P4N_csv/"), full.names = T, pattern = "P4N")
lcsv
for (i in seq_along(lcsv)) {
print(i)
temp <- data.table(read.csv(rP(lcsv[i]), sep = ",", encoding = "UTF-8", header = F))
data <- rbind(data, temp)
}
lcsv[i]
data <- data.table()
lcsv <- list.files(rP("file:///C:/Users/doria/Downloads/test/P4N_csv/"), full.names = T, pattern = "P4N")
lcsv
for (i in seq_along(lcsv)) {
print(i)
temp <- data.table(read.csv(rP(lcsv[i]), sep = ",", encoding = "UTF-8", header = F))
data <- rbind(data, temp)
}
# data <- data.table(read.csv(rP("file:///C:/Users/doria/Downloads/test/test.csv"), sep = ",", encoding = "UTF-8", header = F))
names(data) <-c("id", "lat", "lon", "rating", "type", "url", "name", "desc")
data[, .N, type]
data <- data[type %like% "Daily parking only|Parking lot"]
data[, url := p0("https://park4night.com", url)]
data[, desc := p0("ID: ", id, "\nType: ", type, "\nRating: ", rating, "\nDesc: ", desc)]
data <- u(data)
export.gpx(data[lon != ""], rP("file:///C:/Users/doria/Downloads/test/P4N_balkan.gpx"), add.desc = T, add.url = T)
data
data[, .N, ID]
data[, .N, Id]
data[, .N, id]
data[, .N, id][N>1]
# setup
rm(list = ls())
rootpath <- 'C:/Users/doria/Downloads/GitHub/dorian.gravier.github.io/files/R/'
# Sys.setlocale('LC_ALL', 'German')
source(paste0(rootpath, 'BM_Function_v01.r'), encoding='utf-8')
wd <- rP("file:///C:/Users/doria/Downloads/GitHub/dorian.gravier.github.io/files/R/gpx/skate")
setwd(wd)
system("curl -o list.txt https://skatemap.de/xml/xml_skateparks_live.php")
library(rvest)
url <- "https://skatemap.de/xml/xml_skateparks_live.php"
url %>% read_xml()
library(rvest)
url <- "https://skatemap.de/xml/xml_skateparks_live.php"
url %>% read_xml()
library(xml2)
url <- "https://skatemap.de/xml/xml_skateparks_live.php"
url %>% read_xml()
url %>% read_xml(as_html=T)
url %>% read_xml(as_html=T) %>% xml_ns_strip()
test <- url %>% read_xml(as_html=T) %>% xml_ns_strip()
test
test <- url %>% read_xml(as_html=T) %>% xml_ns_strip() %>% xml_nodes("marker")
test
test <- url %>% read_xml(as_html=T) %>% xml_ns_strip() %>% xml_nodes("marker") %>% xml_text()
test
test <- url %>% read_xml(as_html=T) %>%  xml_nodes("marker")
test
test %>% xml_attr("lat")
data <- data.table(lat = xml_attr(test,"lat"))
data
data <- data.table(lat = xml_attr(test,"lat"), lon = xml_attr(test,"lon"), desc=xml_attr(test,"text"),
id = xml_attr(test,"id"),
)
data <- data.table(lat = xml_attr(test,"lat"), lon = xml_attr(test,"lon"), desc=xml_attr(test,"text"),
id = xml_attr(test,"id"))
data[, url := p0("https://skatemap.de/#"), id)]
data[, url := p0("https://skatemap.de/#", id)]
data[lat == ""]
data[lon == ""]
data[is.na(lon)==T]
data[is.na(lat)==T]
data <- data[is.na(lon)==T]
data <- data.table(lat = xml_attr(test,"lat"), lon = xml_attr(test,"lon"), desc=xml_attr(test,"text"),
id = xml_attr(test,"id"))
data <- data.table(lat = xml_attr(test,"lat"), lon = xml_attr(test,"lng"), desc=xml_attr(test,"text"),
id = xml_attr(test,"id"))
data[, url := p0("https://skatemap.de/#", id)]
data[lat == ""]
data[lon == ""]
data[is.na(lat)==T]
data[is.na(lon)==T]
export.gpx(data, "Skatemap.gpx", add.desc = T, add.url = T)
data <- data.table(lat = xml_attr(test,"lat"), lon = xml_attr(test,"lng"), desc=xml_attr(test,"text"),
id = xml_attr(test,"id"), name = xml_attr(test,"titel"))
data[, url := p0("https://skatemap.de/#", id)]
data[lat == ""]
data[lon == ""]
data[is.na(lat)==T]
data[is.na(lon)==T]
export.gpx(data, "Skatemap.gpx", add.desc = T, add.url = T)
data
data <- data.table(lat = as.numeric(xml_attr(test,"lat")),
lon = as.numeric(xml_attr(test,"lng")),
desc=xml_attr(test,"text"),
id = xml_attr(test,"id"),
name = xml_attr(test,"titel"))
data[, url := p0("https://skatemap.de/#", id)]
data[lat == ""]
data[lon == ""]
data[is.na(lat)==T]
data[is.na(lon)==T]
export.gpx(data, "Skatemap.gpx", add.desc = T, add.url = T)
export.gpx(data, "Skatemap_morris.gpx", add.desc = F, add.url = T)
# setup
rm(list = ls())
rootpath <- 'C:/Users/doria/Downloads/GitHub/dorian.gravier.github.io/files/R/'
# Sys.setlocale('LC_ALL', 'German')
source(paste0(rootpath, 'BM_Function_v01.r'), encoding='utf-8')
library(httr)
library(rvest)
library(tibble)
library(rgdal)
library(sf)
library(concaveman)
# data <- data.table(read.csv(rP("file:///C:/Users/doria/Downloads/test/test.csv"), sep = ",", encoding = "UTF-8", header = F))
# names(data) <-c("id", "lat", "lon", "rating", "type", "url", "name", "desc")
# data[, .N, type]
#
# data <- data[type %like% "Daily parking only|Parking lot"]
# data[, url := p0("https://park4night.com/", url)]
# data[, desc := p0("ID: ", id, "\nType: ", type, "\nRating: ", rating, "\nDesc: ", desc)]
#
# export.gpx(data[lon != ""], rP("file:///C:/Users/doria/Downloads/test/test.gpx"), add.desc = T, add.url = F)
data <- data.table()
lcsv <- list.files(rP("file:///C:/Users/doria/Downloads/test/P4N_csv/"), full.names = T, pattern = "P4N")
lcsv
for (i in seq_along(lcsv)) {
print(i)
temp <- data.table(read.csv(rP(lcsv[i]), sep = ",", encoding = "UTF-8", header = F))
data <- rbind(data, temp)
}
# setup
rm(list = ls())
rootpath <- 'C:/Users/doria/Downloads/GitHub/dorian.gravier.github.io/files/R/'
# Sys.setlocale('LC_ALL', 'German')
source(paste0(rootpath, 'BM_Function_v01.r'), encoding='utf-8')
library(httr)
library(rvest)
library(tibble)
library(rgdal)
library(sf)
library(concaveman)
# data <- data.table(read.csv(rP("file:///C:/Users/doria/Downloads/test/test.csv"), sep = ",", encoding = "UTF-8", header = F))
# names(data) <-c("id", "lat", "lon", "rating", "type", "url", "name", "desc")
# data[, .N, type]
#
# data <- data[type %like% "Daily parking only|Parking lot"]
# data[, url := p0("https://park4night.com/", url)]
# data[, desc := p0("ID: ", id, "\nType: ", type, "\nRating: ", rating, "\nDesc: ", desc)]
#
# export.gpx(data[lon != ""], rP("file:///C:/Users/doria/Downloads/test/test.gpx"), add.desc = T, add.url = F)
data <- data.table()
lcsv <- list.files(rP("file:///C:/Users/doria/Downloads/test/P4N_csv/"), full.names = T, pattern = "P4N")
lcsv
for (i in seq_along(lcsv)) {
print(i)
temp <- data.table(read.csv(rP(lcsv[i]), sep = ",", encoding = "UTF-8", header = F))
data <- rbind(data, temp)
}
# setup
rm(list = ls())
rootpath <- 'C:/Users/doria/Downloads/GitHub/dorian.gravier.github.io/files/R/'
# Sys.setlocale('LC_ALL', 'German')
source(paste0(rootpath, 'BM_Function_v01.r'), encoding='utf-8')
library(httr)
library(rvest)
library(tibble)
library(rgdal)
library(sf)
library(concaveman)
# data <- data.table(read.csv(rP("file:///C:/Users/doria/Downloads/test/test.csv"), sep = ",", encoding = "UTF-8", header = F))
# names(data) <-c("id", "lat", "lon", "rating", "type", "url", "name", "desc")
# data[, .N, type]
#
# data <- data[type %like% "Daily parking only|Parking lot"]
# data[, url := p0("https://park4night.com/", url)]
# data[, desc := p0("ID: ", id, "\nType: ", type, "\nRating: ", rating, "\nDesc: ", desc)]
#
# export.gpx(data[lon != ""], rP("file:///C:/Users/doria/Downloads/test/test.gpx"), add.desc = T, add.url = F)
data <- data.table()
lcsv <- list.files(rP("file:///C:/Users/doria/Downloads/test/P4N_csv/"), full.names = T, pattern = "P4N")
lcsv
for (i in seq_along(lcsv)) {
print(i)
temp <- data.table(read.csv(rP(lcsv[i]), sep = ",", encoding = "UTF-8", header = F))
data <- rbind(data, temp)
}
# data <- data.table(read.csv(rP("file:///C:/Users/doria/Downloads/test/test.csv"), sep = ",", encoding = "UTF-8", header = F))
names(data) <-c("id", "lat", "lon", "rating", "type", "url", "name", "desc")
data[, .N, type]
data <- data[type %like% "Daily parking only|Parking lot"]
data[, url := p0("https://park4night.com", url)]
data[, desc := p0("ID: ", id, "\nType: ", type, "\nRating: ", rating, "\nDesc: ", desc)]
data <- u(data)
export.gpx(data[lon != ""], rP("file:///C:/Users/doria/Downloads/test/P4N_balkan.gpx"), add.desc = T, add.url = T)
# setup
rm(list = ls())
rootpath <- 'C:/Users/doria/Downloads/GitHub/dorian.gravier.github.io/files/R/'
# Sys.setlocale('LC_ALL', 'German')
source(paste0(rootpath, 'BM_Function_v01.r'), encoding='utf-8')
library(httr)
library(rvest)
library(tibble)
library(rgdal)
library(sf)
library(concaveman)
# data <- data.table(read.csv(rP("file:///C:/Users/doria/Downloads/test/test.csv"), sep = ",", encoding = "UTF-8", header = F))
# names(data) <-c("id", "lat", "lon", "rating", "type", "url", "name", "desc")
# data[, .N, type]
#
# data <- data[type %like% "Daily parking only|Parking lot"]
# data[, url := p0("https://park4night.com/", url)]
# data[, desc := p0("ID: ", id, "\nType: ", type, "\nRating: ", rating, "\nDesc: ", desc)]
#
# export.gpx(data[lon != ""], rP("file:///C:/Users/doria/Downloads/test/test.gpx"), add.desc = T, add.url = F)
data <- data.table()
lcsv <- list.files(rP("file:///C:/Users/doria/Downloads/test/P4N_csv/"), full.names = T, pattern = "P4N")
lcsv
for (i in seq_along(lcsv)) {
print(i)
temp <- data.table(read.csv(rP(lcsv[i]), sep = ",", encoding = "UTF-8", header = F))
data <- rbind(data, temp)
data <- u(data)
}
# data <- data.table(read.csv(rP("file:///C:/Users/doria/Downloads/test/test.csv"), sep = ",", encoding = "UTF-8", header = F))
names(data) <-c("id", "lat", "lon", "rating", "type", "url", "name", "desc")
data[, .N, type]
data <- data[type %like% "Daily parking only|Parking lot"]
data[, url := p0("https://park4night.com", url)]
data[, desc := p0("ID: ", id, "\nType: ", type, "\nRating: ", rating, "\nDesc: ", desc)]
data <- u(data)
export.gpx(data[lon != ""], rP("file:///C:/Users/doria/Downloads/test/P4N_balkan.gpx"), add.desc = T, add.url = T)
save.image(".RData")
getwd()
save.image("file:///C:/Users/doria/Downloads/test/data.RData")
save.image(rP"file:///C:/Users/doria/Downloads/test/data.RData"))
save.image(rP("file:///C:/Users/doria/Downloads/test/data.RData"))
country.list <- c("Croatia", "Slovenia", "Hunga", "Serbia", "Montenegro", "Albania", "Bosnia", "Macedonia")
world <- data.table(map_data("world"))
world2 <- world[region %like% paste0(country.list, collapse = "|")]
world2[, .N, region]
ggplot(world2, aes(long, lat, group = group))+
geom_polygon(colour='black', fill=NA)
world[region %like% "Gree"]
# country.list <- c("Corsica", "France", "Germany")
country.list <- c("Croatia", "Slovenia", "Hunga", "Serbia", "Montenegro", "Albania", "Bosnia", "Macedonia", "Greece")
world <- data.table(map_data("world"))
world2 <- world[region %like% paste0(country.list, collapse = "|")]
world2[, .N, region]
ggplot(world2, aes(long, lat, group = group))+
geom_polygon(colour='black', fill=NA)
world2
datasf <- st_as_sf(data, coords = c("lon","lat"), crs = st_crs(4326))
datasf
setnames(world, "long", "lon")
world2 <- world[region %like% paste0(country.list, collapse = "|")]
world2[, .N, region]
ggplot(world2, aes(lon, lat, group = group))+
geom_polygon(colour='black', fill=NA)
ggplot(world2, aes(lon, lat, group = group))+
geom_polygon(colour='black', fill=NA)+
geom_points(data=data, aes(lon, lat))
ggplot(world2, aes(lon, lat, group = group))+
geom_polygon(colour='black', fill=NA)+
geom_point(data=data, aes(lon, lat))
ggplot()+
geom_polygon(data=world2, aes(lon, lat, group = group), colour='black', fill=NA)+
geom_point(data=data, aes(lon, lat))
world2sf <- st_as_sf(world2, coords = c("lon","lat"), crs = st_crs(4326))
datasf2 <- st_crop(world2sf, datasf)
ggplot()+
geom_polygon(data=world2sf, aes(lon, lat, group = group), colour='black', fill=NA)+
geom_point(data=datasf2, aes(lon, lat))
world2sf
st_as_text(data2sf)
st_as_text(datasf2)
data[, lon2 := lon]
data[, lat2 := lat]
world2[, lon2 := lon]
world2[, lat2 := lat]
datasf <- st_as_sf(data, coords = c("lon2","lat2"), crs = st_crs(4326))
datasf
world2sf <- st_as_sf(world2, coords = c("lon2","lat2"), crs = st_crs(4326))
datasf2 <- st_crop(world2sf, datasf)
ggplot()+
geom_polygon(data=world2, aes(lon, lat, group = group), colour='black', fill=NA)+
geom_point(data=datasf2, aes(lon, lat))
datasf2 <- st_filter(datasf, world2sf)
# datasf2 <- st_crop(world2sf, datasf)
ggplot()+
geom_polygon(data=world2, aes(lon, lat, group = group), colour='black', fill=NA)+
geom_point(data=datasf2, aes(lon, lat))
st_crs(4326)
datasf <- st_as_sf(data, coords = c("lon2","lat2")) # , crs = st_crs(4326)
datasf
world2sf <- st_as_sf(world2, coords = c("lon2","lat2")) # , crs = st_crs(4326)
datasf2 <- st_filter(datasf, world2sf)
# datasf2 <- st_crop(world2sf, datasf)
ggplot()+
geom_polygon(data=world2, aes(lon, lat, group = group), colour='black', fill=NA)+
geom_point(data=datasf2, aes(lon, lat))
datasf2 <- st_filter(world2sf, datasf)
world2sf <- concavman(st_as_sf(world2, coords = c("lon2","lat2")) # , crs = st_crs(4326) )
world2sf <- concavman(st_as_sf(world2, coords = c("lon2","lat2"))) # , crs = st_crs(4326) )
world2sf <- concaveman(st_as_sf(world2, coords = c("lon2","lat2"))) # , crs = st_crs(4326) )
datasf2 <- st_filter(world2sf, datasf)
datasf2 <- st_filter(datasf, world2sf)
# datasf2 <- st_crop(world2sf, datasf)
ggplot()+
geom_polygon(data=world2, aes(lon, lat, group = group), colour='black', fill=NA)+
geom_point(data=datasf2, aes(lon, lat))
export.gpx(datasf2[lon != ""], rP("file:///C:/Users/doria/Downloads/test/P4N_balkan.gpx"), add.desc = T, add.url = T)
datasf2
data.table(datasf2)
export.gpx(data.table(datasf2[lon != ""]), rP("file:///C:/Users/doria/Downloads/test/P4N_balkan.gpx"), add.desc = T, add.url = T)
data.table(datasf2)
export.gpx(data.table(datasf2)[lon != ""], rP("file:///C:/Users/doria/Downloads/test/P4N_balkan.gpx"), add.desc = T, add.url = T)
save.image(rP("file:///C:/Users/doria/Downloads/test/data.RData"))
