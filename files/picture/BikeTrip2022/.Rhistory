all2 <- u(all2)
all2[, V1 := NULL]
# str(all2)
all2[, lon := as.numeric(lon)]
all2[, lat := as.numeric(lat)]
all2 <- all2[!is.na(lat)]
all2 <- all2[!is.na(lon)]
setnames(all2, "link", "url")
latslongs <- SpatialPointsDataFrame(coords=all2[, .(lon, lat)], data=all2[, .(desc, name, url)], proj4string =CRS("+proj=longlat + ellps=WGS84"))
newfile <- p0("C:/Users/doria/Downloads/Outdoor/Topo/thecrag/thecrag/", str_to_title(lc[i]), ".gpx")
writeOGR(latslongs, dsn=newfile,
dataset_options="GPX_USE_EXTENSIONS=yes",layer="waypoints",driver="GPX", overwrite_layer = T, )
data <- data.table(x = readLines(newfile))
data <- data[grep("extension", x, invert = T)]
data[, x := gsub("ogr:url", "url", x)]
data[, x := gsub(" \\<url", " <url", x)]
write.table(data$x, newfile, quote = F, row.names = F, col.names = F)
latslongs2 <- SpatialPointsDataFrame(coords=all2[, .(lon, lat)], data=all2[, .(name)], proj4string =CRS("+proj=longlat + ellps=WGS84"))
newfile <- p0("C:/Users/doria/Downloads/Outdoor/Topo/thecrag/thecrag/", str_to_title(lc[i]), "_QGIS.gpx")
writeOGR(latslongs2, dsn=newfile,
dataset_options="GPX_USE_EXTENSIONS=yes",layer="waypoints",driver="GPX", overwrite_layer = T, )
rm(all2)
cat("Done")
}
lc
i=5
cat("Start Country:", lc[i])
lf <- list.files("C:/Users/doria/Downloads/Outdoor/Topo/thecrag/thecrag/gpx_converted", full.names = T, pattern = lc[i])
all2 <-  rbindlist(lapply(lf, function(file) {
dt = fread(file, fill = T)
# further processing/filtering
}))
all2 <- u(all2)
all2[, V1 := NULL]
# str(all2)
all2[, lon := as.numeric(lon)]
all2[, lat := as.numeric(lat)]
all2 <- all2[!is.na(lat)]
all2 <- all2[!is.na(lon)]
setnames(all2, "link", "url")
all2
all2[order(name)]
all2[order(name, url)]
all2[, .SD[1], .(name, url)]
all2[, .SD[1], .(name)]
all <- copy(all2)
all[,url := NULL]
u(all)
all2[, .SD[1], .(name, lat, lon)]
all2[, .SD[1], .(name, lat, lon, desc)]
u(all)
u(all)[order(name)]
u(all)[, .N, name]
u(all)[, .N, name][N ==2]
all[name %in% all[, .N, name][N ==2]$name]
all <- u(all)
all[, .N, name][N ==2]
all[name %in% all[, .N, name][N ==2]$name]
all[name %in% all[, .N, name][N ==2]$name][order(name)]
all2 <-  rbindlist(lapply(lf, function(file) {
dt = fread(file, fill = T)
# further processing/filtering
}))
all2BU <-  copy(all2)
all2[desc == ""]
all2[, .I[nch == max(nch)], .(name, lat, lon)]
all2[, nch := nchar(desc)]
all2[, .I[nch == max(nch)], .(name, lat, lon)]
all2BU <-  copy(all2)
all2 <- all2[all2[, .I[nch == max(nch)], .(name, lat, lon)]$V1]
all2[, nch := nchar(desc)]
all2
all2[, nch := nchar(desc)]
all2
all2 <- all2[all2[, .I[nch == max(nch)], .(name, lat, lon)]$V1]
all2 <- u(all2)
all2[, V1 := NULL]
# str(all2)
all2[, lon := as.numeric(lon)]
all2[, lat := as.numeric(lat)]
all2 <- all2[!is.na(lat)]
all2 <- all2[!is.na(lon)]
setnames(all2, "link", "url")
all2 <- all2[order(name, url)]
all2[, .SD[1], .(name, lat, lon, desc)]
for(i in seq_along(lc)) {
cat("Start Country:", lc[i])
lf <- list.files("C:/Users/doria/Downloads/Outdoor/Topo/thecrag/thecrag/gpx_converted", full.names = T, pattern = lc[i])
# lf[7891]
# fread(lf[7891])
all2 <-  rbindlist(lapply(lf, function(file) {
dt = fread(file, fill = TRUE)
# further processing/filtering
}))
all2BU <-  copy(all2)
all2[, nch := nchar(desc)]
all2
all2 <- all2[all2[, .I[nch == max(nch)], .(name, lat, lon)]$V1]
all2 <- u(all2)
all2[, V1 := NULL]
# str(all2)
all2[, lon := as.numeric(lon)]
all2[, lat := as.numeric(lat)]
all2 <- all2[!is.na(lat)]
all2 <- all2[!is.na(lon)]
setnames(all2, "link", "url")
all2 <- all2[order(name, url)]
all2 <- all2[, .SD[1], .(name, lat, lon, desc)]
latslongs <- SpatialPointsDataFrame(coords=all2[, .(lon, lat)], data=all2[, .(desc, name, url)], proj4string =CRS("+proj=longlat + ellps=WGS84"))
newfile <- p0("C:/Users/doria/Downloads/Outdoor/Topo/thecrag/thecrag/", str_to_title(lc[i]), ".gpx")
writeOGR(latslongs, dsn=newfile,
dataset_options="GPX_USE_EXTENSIONS=yes",layer="waypoints",driver="GPX", overwrite_layer = T, )
data <- data.table(x = readLines(newfile))
data <- data[grep("extension", x, invert = T)]
data[, x := gsub("ogr:url", "url", x)]
data[, x := gsub(" \\<url", " <url", x)]
write.table(data$x, newfile, quote = F, row.names = F, col.names = F)
latslongs2 <- SpatialPointsDataFrame(coords=all2[, .(lon, lat)], data=all2[, .(name)], proj4string =CRS("+proj=longlat + ellps=WGS84"))
newfile <- p0("C:/Users/doria/Downloads/Outdoor/Topo/thecrag/thecrag/", str_to_title(lc[i]), "_QGIS.gpx")
writeOGR(latslongs2, dsn=newfile,
dataset_options="GPX_USE_EXTENSIONS=yes",layer="waypoints",driver="GPX", overwrite_layer = T, )
rm(all2)
cat("Done")
}
printfast(a, "Elevation.jpg", 300,1200, wdfunction = "C:/Users/doria/Downloads/GitHub/dorian.gravier.github.io/files/picture/BikeTrip2022")
printfast(b, "Distance.jpg", 300,1200, wdfunction = "C:/Users/doria/Downloads/GitHub/dorian.gravier.github.io/files/picture/BikeTrip2022")
printfast(c, "Ascent.jpg", 300,1200, wdfunction = "C:/Users/doria/Downloads/GitHub/dorian.gravier.github.io/files/picture/BikeTrip2022")
# Setup ----------------------------------------------------------------
library(plotKML)
library(ggplot2)
theme_set(theme_bw())
library(formattable)
library(geosphere)
library(gridExtra)
library(data.table)
wd <- "C:/Users/doria/Downloads/GitHub/dorian.gravier.github.io/files"
outjs <- "C:/Users/doria/Downloads/GitHub/dorian.gravier.github.io/js/Personal/gpx_biketrip2022.js"
if( !dir.exists(wd) ) {
wd <- "C:/Users/doria/Downloads/GitHub/dorian.gravier.github.io/files"
outjs <- "C:/Users/doria/Downloads/GitHub/dorian.gravier.github.io/js/Personal/gpx_biketrip2022.js"
}
setwd(wd)
printfast <- function(plot, name, height=400, width=500, ps=12, qualityprint=100, ext = "jpg", wdfunction = getwd()) {
setwd(wdfunction)
if(ext %in% c("jpg", ".jpg", "jpeg", ".jpeg")) {
jpeg(filename=name, quality=qualityprint, pointsize = ps, height=height, width=width)
print(
plot
)
dev.off()
graphics.off()
}
if(ext %in% c("png", ".png")) {
png(filename=name, pointsize = ps, height=height, width=width)
print(
plot
)
dev.off()
graphics.off()
}
}
# get data ----------------------------------------------------------------
lis <- data.table(path = list.files(wd, pattern = "\\.gpx", full = T, recursive = T))
lis <- lis[!path %like% "gpx.reg"]
lis <- lis[!path %like% "_site"]
lis <- lis[path %like% "Bike_trip_2022"]
lis[, path2 := gsub(paste0(dirname(wd), "/"), "", path) ]
lis[, dir := dirname(path2) ]
lisdir <- unique(lis$dir)
lisdir
# output ------------------------------------------------------------------
write("// create file", file = outjs)
for(i in seq_along(lisdir)) {
if( lisdir[i] != "gpx" ) {
if( basename(lisdir[i]) == "Project" ) {
varname <- paste0(basename(dirname(lisdir[i])), basename(lisdir[i]))
} else {
varname <- basename(lisdir[i])
}
lis2 <- lis[dir == lisdir[i]]
for( j in 1:nrow(lis2)) {
if( j == 1) {
write(paste0("var ", varname, " = ['", lis2[j, path2], "',"), file = outjs, append = T)
} else if( j == nrow(lis2)) {
write(paste0("'", lis2[j, path2], "']\n"), file = outjs, append = T)
} else {
write(paste0("'", lis2[j, path2], "',"), file = outjs, append = T)
}
}
}
}
# GPX ---------------------------------------------------------------------
files <- lis$path
all <- data.table()
for (i in 1:length(files)) {
route <- data.table(readGPX(files[i])$tracks[[1]][[1]])
route[, file := files[i]]
route[, dist := 0]
route[2:nrow(route), dist := distHaversine(route[,.(lon, lat)])/1000]
all <- rbind(all, route)
}
all[, ele := as.numeric(ele)]
all[, time2 := strptime(substr(time, 1, 10), format = "%Y-%m-%d")]
all[, ele2 := ele-shift(ele)]
all[, ele2type := "Ascent"]
all[ele2<=0, ele2type := "Descent"]
all
all[, distfs := 0]
for(i in 2:nrow(all)) {
all[i, distfs := all$distfs[i-1]+all$dist[i]]
}
all
distanceTT <- round(sum(all$dist, na.rm = T))
distanceTT
daysTT <- as.numeric(round(max(all$time2)-min(all$time2)))
daysTT
daysBike <- length(unique(all$time2))
daysBike
TTa <- sum(all[ele2type == "Ascent"]$ele2, na.rm = T)
TTa
TTb <- sum(all[ele2type == "Descent"]$ele2, na.rm = T)
TTb
# create plots
b <- ggplot(all, aes(time2, dist))+stat_summary(fun = "sum", geom = "bar")+xlab("Date")+ylab("Distance (km)")+labs(title="Distance per day")+theme(text = element_text(size =15))
c <- ggplot(all, aes(time2, ele2))+stat_summary(aes(fill=ele2type),fun = "sum", geom = "bar")+xlab("Date")+ylab("Elevation (m)")+labs(title="Ascent and descent per day")+theme(text = element_text(size =15))
a <- ggplot(all, aes(distfs, ele))+geom_line()+ylab("Altitude (m)")+xlab("Distance (km)")+labs(title="Elevation profile for the bike trip")+theme(text = element_text(size =15))
printfast(a, "Elevation.jpg", 300,1200, wdfunction = "C:/Users/doria/Downloads/GitHub/dorian.gravier.github.io/files/picture/BikeTrip2022")
printfast(b, "Distance.jpg", 300,1200, wdfunction = "C:/Users/doria/Downloads/GitHub/dorian.gravier.github.io/files/picture/BikeTrip2022")
printfast(c, "Ascent.jpg", 300,1200, wdfunction = "C:/Users/doria/Downloads/GitHub/dorian.gravier.github.io/files/picture/BikeTrip2022")
a <- ggplot(all, aes(distfs, ele))+geom_line()+ylab("Altitude (m)")+xlab("Distance (km)")+labs(title="Elevation profile for the bike trip")+theme(text = element_text(size =15))+scale_y_continuous(sec.axis=sec.axis())
a
a <- ggplot(all, aes(distfs, ele))+geom_line()+ylab("Altitude (m)")+xlab("Distance (km)")+labs(title="Elevation profile for the bike trip")+theme(text = element_text(size =15))+scale_y_continuous(sec.axis=sec_axis())
a
a <- ggplot(all, aes(distfs, ele))+geom_line()+ylab("Altitude (m)")+xlab("Distance (km)")+labs(title="Elevation profile for the bike trip")+theme(text = element_text(size =15))+scale_y_continuous(sec.axis=dup_axis())
a
# Setup ----------------------------------------------------------------
library(plotKML)
library(ggplot2)
theme_set(theme_bw())
library(formattable)
library(geosphere)
library(gridExtra)
library(data.table)
wd <- "C:/Users/doria/Downloads/GitHub/dorian.gravier.github.io/files"
outjs <- "C:/Users/doria/Downloads/GitHub/dorian.gravier.github.io/js/Personal/gpx_biketrip2022.js"
if( !dir.exists(wd) ) {
wd <- "C:/Users/doria/Downloads/GitHub/dorian.gravier.github.io/files"
outjs <- "C:/Users/doria/Downloads/GitHub/dorian.gravier.github.io/js/Personal/gpx_biketrip2022.js"
}
setwd(wd)
printfast <- function(plot, name, height=400, width=500, ps=12, qualityprint=100, ext = "jpg", wdfunction = getwd()) {
setwd(wdfunction)
if(ext %in% c("jpg", ".jpg", "jpeg", ".jpeg")) {
jpeg(filename=name, quality=qualityprint, pointsize = ps, height=height, width=width)
print(
plot
)
dev.off()
graphics.off()
}
if(ext %in% c("png", ".png")) {
png(filename=name, pointsize = ps, height=height, width=width)
print(
plot
)
dev.off()
graphics.off()
}
}
# get data ----------------------------------------------------------------
lis <- data.table(path = list.files(wd, pattern = "\\.gpx", full = T, recursive = T))
lis <- lis[!path %like% "gpx.reg"]
lis <- lis[!path %like% "_site"]
lis <- lis[path %like% "Bike_trip_2022"]
lis[, path2 := gsub(paste0(dirname(wd), "/"), "", path) ]
lis[, dir := dirname(path2) ]
lisdir <- unique(lis$dir)
lisdir
# output ------------------------------------------------------------------
write("// create file", file = outjs)
for(i in seq_along(lisdir)) {
if( lisdir[i] != "gpx" ) {
if( basename(lisdir[i]) == "Project" ) {
varname <- paste0(basename(dirname(lisdir[i])), basename(lisdir[i]))
} else {
varname <- basename(lisdir[i])
}
lis2 <- lis[dir == lisdir[i]]
for( j in 1:nrow(lis2)) {
if( j == 1) {
write(paste0("var ", varname, " = ['", lis2[j, path2], "',"), file = outjs, append = T)
} else if( j == nrow(lis2)) {
write(paste0("'", lis2[j, path2], "']\n"), file = outjs, append = T)
} else {
write(paste0("'", lis2[j, path2], "',"), file = outjs, append = T)
}
}
}
}
# GPX ---------------------------------------------------------------------
files <- lis$path
all <- data.table()
for (i in 1:length(files)) {
route <- data.table(readGPX(files[i])$tracks[[1]][[1]])
route[, file := files[i]]
route[, dist := 0]
route[2:nrow(route), dist := distHaversine(route[,.(lon, lat)])/1000]
all <- rbind(all, route)
}
all[, ele := as.numeric(ele)]
all[, time2 := strptime(substr(time, 1, 10), format = "%Y-%m-%d")]
all[, ele2 := ele-shift(ele)]
all[, ele2type := "Ascent"]
all[ele2<=0, ele2type := "Descent"]
all
all[, distfs := 0]
for(i in 2:nrow(all)) {
all[i, distfs := all$distfs[i-1]+all$dist[i]]
}
all
distanceTT <- round(sum(all$dist, na.rm = T))
distanceTT
daysTT <- as.numeric(round(max(all$time2)-min(all$time2)))
daysTT
daysBike <- length(unique(all$time2))
daysBike
TTa <- sum(all[ele2type == "Ascent"]$ele2, na.rm = T)
TTa
TTb <- sum(all[ele2type == "Descent"]$ele2, na.rm = T)
TTb
# create plots
b <- ggplot(all, aes(time2, dist))+stat_summary(fun = "sum", geom = "bar")+xlab("Date")+ylab("Distance (km)")+labs(title="Distance per day")+theme(text = element_text(size =15))+scale_y_continuous(sec.axis=dup_axis())
c <- ggplot(all, aes(time2, ele2))+stat_summary(aes(fill=ele2type),fun = "sum", geom = "bar")+xlab("Date")+ylab("Elevation (m)")+labs(title="Ascent and descent per day")+theme(text = element_text(size =15))+scale_y_continuous(sec.axis=dup_axis())
a <- ggplot(all, aes(distfs, ele))+geom_line()+ylab("Altitude (m)")+xlab("Distance (km)")+labs(title="Elevation profile for the bike trip")+theme(text = element_text(size =15))+scale_y_continuous(sec.axis=dup_axis())
a
printfast(a, "Elevation.jpg", 300,1200, wdfunction = "C:/Users/doria/Downloads/GitHub/dorian.gravier.github.io/files/picture/BikeTrip2022")
printfast(b, "Distance.jpg", 300,1200, wdfunction = "C:/Users/doria/Downloads/GitHub/dorian.gravier.github.io/files/picture/BikeTrip2022")
printfast(c, "Ascent.jpg", 300,1200, wdfunction = "C:/Users/doria/Downloads/GitHub/dorian.gravier.github.io/files/picture/BikeTrip2022")
info <- data.table(What=c("Distance total (km)",
"Days spent on the bike",
"Days gone",
"Total ascent (m)",
"Total descent (m)"), value = c(distanceTT,
daysBike,
daysTT,
TTa,
TTb))
info[, value := round(value)]
info
png("C:/Users/doria/Downloads/GitHub/dorian.gravier.github.io/files/picture/BikeTrip2022/Info.png", height = 200, width = 300)
grid.table(info)
# formattable(info)
dev.off()
grid.table(info, theme=ttheme_minimal())
grid.table(info, theme=ttheme_minimal(), rows=F)
grid.table(info, theme=ttheme_minimal(), rows="")
grid.table(info, theme=ttheme_minimal(), rows=rep("", nrow(info)))
grid.table(info, theme=ttheme_minimal())
# formattable(info)
dev.off()
grid.table(info, theme=ttheme_minimal(), rows=rep("", nrow(info)))
grid.table(info, theme=ttheme_minimal(base_colour="#e27728"), rows=rep("", nrow(info)))
png("C:/Users/doria/Downloads/GitHub/dorian.gravier.github.io/files/picture/BikeTrip2022/Info.png", height = 200, width = 300, bg = "#424242")
grid.table(info, theme=ttheme_minimal(base_colour="#e27728"), rows=rep("", nrow(info)))
# formattable(info)
dev.off()
png("C:/Users/doria/Downloads/GitHub/dorian.gravier.github.io/files/picture/BikeTrip2022/Info.png", height = 200, width = 300, bg = "#424242")
grid.table(info, theme=ttheme_minimal(base_colour="#e27728"), rows=rep("", nrow(info)))
# formattable(info)
dev.off()
# formattable(info)
dev.off()
# formattable(info)
dev.off()
png("C:/Users/doria/Downloads/GitHub/dorian.gravier.github.io/files/picture/BikeTrip2022/Info.png", height = 200, width = 300, bg = "#424242")
grid.table(info, theme=ttheme_minimal(base_colour="#e27728"), rows=rep("", nrow(info)))
# formattable(info)
dev.off()
png("C:/Users/doria/Downloads/GitHub/dorian.gravier.github.io/files/picture/BikeTrip2022/Info.png", height = 200, width = 300, bg = "#424242")
grid.table(info, theme=ttheme_minimal(base_colour="#f0e3cb", base_size = 20), rows=rep("", nrow(info)))
# formattable(info)
dev.off()
png("C:/Users/doria/Downloads/GitHub/dorian.gravier.github.io/files/picture/BikeTrip2022/Info.png", height = 300, width = 500, bg = "#424242")
grid.table(info, theme=ttheme_minimal(base_colour="#f0e3cb", base_size = 20), rows=rep("", nrow(info)))
# formattable(info)
dev.off()
png("C:/Users/doria/Downloads/GitHub/dorian.gravier.github.io/files/picture/BikeTrip2022/Info.png", height = 300, width = 500, bg = "#424242")
grid.table(info, theme=ttheme_minimal(base_colour="#f0e3cb", base_size = 30), rows=rep("", nrow(info)))
# formattable(info)
dev.off()
png("C:/Users/doria/Downloads/GitHub/dorian.gravier.github.io/files/picture/BikeTrip2022/Info.png", height = 300, width = 500, bg = "#424242")
grid.table(info, theme=ttheme_minimal(base_colour="#f0e3cb", base_size = 20), rows=rep("", nrow(info)))
# formattable(info)
dev.off()
# Setup ----------------------------------------------------------------
library(plotKML)
library(ggplot2)
theme_set(theme_bw())
library(formattable)
library(geosphere)
library(gridExtra)
library(data.table)
wd <- "C:/Users/doria/Downloads/GitHub/dorian.gravier.github.io/files"
outjs <- "C:/Users/doria/Downloads/GitHub/dorian.gravier.github.io/js/Personal/gpx_biketrip2022.js"
if( !dir.exists(wd) ) {
wd <- "C:/Users/doria/Downloads/GitHub/dorian.gravier.github.io/files"
outjs <- "C:/Users/doria/Downloads/GitHub/dorian.gravier.github.io/js/Personal/gpx_biketrip2022.js"
}
setwd(wd)
printfast <- function(plot, name, height=400, width=500, ps=12, qualityprint=100, ext = "jpg", wdfunction = getwd()) {
setwd(wdfunction)
if(ext %in% c("jpg", ".jpg", "jpeg", ".jpeg")) {
jpeg(filename=name, quality=qualityprint, pointsize = ps, height=height, width=width)
print(
plot
)
dev.off()
graphics.off()
}
if(ext %in% c("png", ".png")) {
png(filename=name, pointsize = ps, height=height, width=width)
print(
plot
)
dev.off()
graphics.off()
}
}
# get data ----------------------------------------------------------------
lis <- data.table(path = list.files(wd, pattern = "\\.gpx", full = T, recursive = T))
lis <- lis[!path %like% "gpx.reg"]
lis <- lis[!path %like% "_site"]
lis <- lis[path %like% "Bike_trip_2022"]
lis[, path2 := gsub(paste0(dirname(wd), "/"), "", path) ]
lis[, dir := dirname(path2) ]
lisdir <- unique(lis$dir)
lisdir
# output ------------------------------------------------------------------
write("// create file", file = outjs)
for(i in seq_along(lisdir)) {
if( lisdir[i] != "gpx" ) {
if( basename(lisdir[i]) == "Project" ) {
varname <- paste0(basename(dirname(lisdir[i])), basename(lisdir[i]))
} else {
varname <- basename(lisdir[i])
}
lis2 <- lis[dir == lisdir[i]]
for( j in 1:nrow(lis2)) {
if( j == 1) {
write(paste0("var ", varname, " = ['", lis2[j, path2], "',"), file = outjs, append = T)
} else if( j == nrow(lis2)) {
write(paste0("'", lis2[j, path2], "']\n"), file = outjs, append = T)
} else {
write(paste0("'", lis2[j, path2], "',"), file = outjs, append = T)
}
}
}
}
# GPX ---------------------------------------------------------------------
files <- lis$path
all <- data.table()
for (i in 1:length(files)) {
route <- data.table(readGPX(files[i])$tracks[[1]][[1]])
route[, file := files[i]]
route[, dist := 0]
route[2:nrow(route), dist := distHaversine(route[,.(lon, lat)])/1000]
all <- rbind(all, route)
}
all[, ele := as.numeric(ele)]
all[, time2 := strptime(substr(time, 1, 10), format = "%Y-%m-%d")]
all[, ele2 := ele-shift(ele)]
all[, ele2type := "Ascent"]
all[ele2<=0, ele2type := "Descent"]
all
all[, distfs := 0]
for(i in 2:nrow(all)) {
all[i, distfs := all$distfs[i-1]+all$dist[i]]
}
all
distanceTT <- round(sum(all$dist, na.rm = T))
distanceTT
daysTT <- as.numeric(round(max(all$time2)-min(all$time2)))
daysTT
daysBike <- length(unique(all$time2))
daysBike
TTa <- sum(all[ele2type == "Ascent"]$ele2, na.rm = T)
TTa
TTb <- sum(all[ele2type == "Descent"]$ele2, na.rm = T)
TTb
# create plots
b <- ggplot(all, aes(time2, dist))+stat_summary(fun = "sum", geom = "bar")+xlab("Date")+ylab("Distance (km)")+labs(title="Distance per day")+theme(text = element_text(size =15))+scale_y_continuous(sec.axis=dup_axis())
c <- ggplot(all, aes(time2, ele2))+stat_summary(aes(fill=ele2type),fun = "sum", geom = "bar")+xlab("Date")+ylab("Elevation (m)")+labs(title="Ascent and descent per day")+theme(text = element_text(size =15))+scale_y_continuous(sec.axis=dup_axis())
a <- ggplot(all, aes(distfs, ele))+geom_line()+ylab("Altitude (m)")+xlab("Distance (km)")+labs(title="Elevation profile for the bike trip")+theme(text = element_text(size =15))+scale_y_continuous(sec.axis=dup_axis())
a
printfast(a, "Elevation.jpg", 300,1200, wdfunction = "C:/Users/doria/Downloads/GitHub/dorian.gravier.github.io/files/picture/BikeTrip2022")
printfast(b, "Distance.jpg", 300,1200, wdfunction = "C:/Users/doria/Downloads/GitHub/dorian.gravier.github.io/files/picture/BikeTrip2022")
printfast(c, "Ascent.jpg", 300,1200, wdfunction = "C:/Users/doria/Downloads/GitHub/dorian.gravier.github.io/files/picture/BikeTrip2022")
info <- data.table(What=c("Distance total (km)",
"Days spent on the bike",
"Days gone",
"Total ascent (m)",
"Total descent (m)"), value = c(distanceTT,
daysBike,
daysTT,
TTa,
TTb))
info[, value := round(value)]
info
png("C:/Users/doria/Downloads/GitHub/dorian.gravier.github.io/files/picture/BikeTrip2022/Info.png", height = 300, width = 500, bg = "#424242")
grid.table(info, theme=ttheme_minimal(base_colour="#f0e3cb", base_size = 20), rows=rep("", nrow(info)))
# formattable(info)
dev.off()
