mpg
mpg[, new:= 0]
for(i in 2:nrow(mpg)) {
mpg[i, new := mpg$displ[i-1]+mpg$new[i]]
}
mpg
mpg
mpg$new
mpg$new[2:nrow(mpg)]
mpq$displ[1:(nrow(mpg)-1)]
mpg$displ[1:(nrow(mpg)-1)]
mpg[, new := mpg$displ[1:(nrow(mpg)-1)]+mpg$new[2:nrow(mpg)]]
length(mpg$new[2:nrow(mpg)])
length(mpg$displ[1:(nrow(mpg)-1)])
mpg[2:nrow(mpg), new := mpg$displ[1:(nrow(mpg)-1)]+mpg$new[2:nrow(mpg)]]
mpg
mpg[, new:= 0]
for(i in 2:nrow(mpg)) {
mpg[i, new := mpg$displ[i-1]+mpg$new[i]]
}
mpg
mpg
mpg[, new:= 0]
for(i in 2:nrow(mpg)) {
mpg[i, new := mpg$displ[i]+mpg$new[i-1]]
}
mpg
mpg
devtools::install_github("zappingseb/rayshaderanimate")
library(devtools)
install.packages("devtools")
install.packages("devtools")
install.packages("devtools")
install.packages("devtools")
devtools::install_github("zappingseb/rayshaderanimate")
library(devtools)
library(rayshaderanimate)
library(data.table)
gpx <- "C:/Users/doria/Downloads/GitHub/dorian.gravier.github.io/files/gpx/Bike_trip_2022/B_2022_Bike-travel_051.gpx"
data <- get_table_from_gpx(gpx)
library(rayshadeanimate)
devtools::install_github("zappingseb/rayshaderanimate")
1
library(rayshadeanimate)
devtools::install_github("zappingseb/rayshaderanimate")
library(pacman)
install.packages("pacman")
library(pacman)
update.packages(p_lib())
p_lib()
devtools::install_github("zappingseb/rayshaderanimate")
install.packages("vctrs")
install.packages("vctrs")
devtools::install_github("zappingseb/rayshaderanimate")
library(rayshadeanimate)
devtools::install_github("zappingseb/rayshaderanimate")
library(ray)
library(rayshaderanimate)
library(data.table)
gpx <- "C:/Users/doria/Downloads/GitHub/dorian.gravier.github.io/files/gpx/Bike_trip_2022/B_2022_Bike-travel_051.gpx"
data <- get_table_from_gpx(gpx)
data
data <-get_table_from_gpx(gpx)
data
get_enriched_gpx_table(data)
databbox <- get_bbox_from_gpx_table(data)
data2 <- get_enriched_gpx_table(data)
data2
databbox <- get_bbox_from_gpx_table(data)
databbox
el_mat <- get_elevdata_from_bbox(databbox)
el_mat <- get_elevdata_from_bbox(databbox)
bbox <- get_bbox_from_gpx_table(data)
bbox
getData("SRTM", lon = bbox[1, 1], lat = bbox[2, 2])
raster::getData("SRTM", lon = bbox[1, 1], lat = bbox[2, 2])
install.packages("geodata")
geodata::elevation_3s(lon = bbox[1, 1], lat = bbox[2, 2])
geodata::elevation_3s(lon = bbox[1, 1], lat = bbox[2, 2], path = "C:/Users/doria/Downloads")
# Animate GPX line on 2d plot
plot_2d_animation()
# Plot a 2D raster of the bbox
plot_2d_elevdata()
getData(namepath="C:/Users/doria/Downloads/srtm_37_04 (1).zip")
raster::getData(namepath="C:/Users/doria/Downloads/srtm_37_04 (1).zip")
raster::getData(path="C:/Users/doria/Downloads/srtm_37_04 (1).zip")
raster::getData("SRTM"; path="C:/Users/doria/Downloads/srtm_37_04 (1).zip")
raster::getData("SRTM", path="C:/Users/doria/Downloads/srtm_37_04 (1).zip")
raster::getData("SRTM", lon = bbox[1, 1], lat = bbox[2, 2], path="C:/Users/doria/Downloads/srtm_37_04 (1).zip")
trace("getData", edit =T)
trace("raster::getData", edit =T)
library(raster)
trace("getData", edit =T)
trace("get_raw_elevdata_from_bbox", edit =T)
trace(".get_raw_elevdata_from_bbox", edit =T)
library(rayshadeanimate)
library(rayshadeanimate)
library(rayshaderanimate)
trace("get_raw_elevdata_from_bbox", edit =T)
trace(".get_raw_elevdata_from_bbox", edit =T)
trace(".get_raw_elevdata_from_bbox", edit =T)
fix(".get_raw_elevdata_from_bbox")
fix("get_raw_elevdata_from_bbox")
fix("getData")
find("get_raw_elevdata_from_bbox")
get_raw_elevdata_from_bbox()
get_raw_elevdata_from_bbox(
fix("get_raw_elevdata_from_bbox")
getAnywhere("get_raw_elevdata_from_bbox")
fix("rayshaderanimate:::get_raw_elevdata_from_bbox")
fix("rayshaderanimate:::.get_raw_elevdata_from_bbox")
fix("rayshaderanimate::.get_raw_elevdata_from_bbox")
getAnywhere(get_raw_elevdata_from_bbox)
getAnywhere(.get_raw_elevdata_from_bbox)
[]
fix(`rayshaderanimate::.get_raw_elevdata_from_bbox`())
fix(`rayshaderanimate::.get_raw_elevdata_from_bbox`
fix(`rayshaderanimate::.get_raw_elevdata_from_bbox`)
fix(`rayshaderanimate:::.get_raw_elevdata_from_bbox`)
fix(rayshaderanimate::.get_raw_elevdata_from_bbox)
fix("rayshaderanimate::.get_raw_elevdata_from_bbox")
fix("rayshaderanimate:::.get_raw_elevdata_from_bbox")
fix(".get_raw_elevdata_from_bbox", "rayshaderanimate")
fix("get_raw_elevdata_from_bbox", "rayshaderanimate")
getAnywhere(.get_raw_elevdata_from_bbox)[1]
getAnywhere(.get_raw_elevdata_from_bbox)[2]
rayshaderanimate:::.get_raw_elevdata_from_bbox
fix("rayshaderanimate:::.get_raw_elevdata_from_bbox")
trace("rayshaderanimate:::.get_raw_elevdata_from_bbox", edit = T)
fixInNamespace(".get_raw_elevdata_from_bbox", "rayshaderanimate")
el_mat <- get_elevdata_from_bbox(databbox)
fixInNamespace(".get_raw_elevdata_from_bbox", "rayshaderanimate")
el_mat <- get_elevdata_from_bbox(databbox)
getAnywhere(".downloadDirect")
fixInNamespace(".get_raw_elevdata_from_bbox", "rayshaderanimate")
el_mat <- get_elevdata_from_bbox(databbox)
devtools::install_github("fedefyco/raster")
library(rayshaderanimate)
library(data.table)
gpx <- "C:/Users/doria/Downloads/GitHub/dorian.gravier.github.io/files/gpx/Bike_trip_2022/B_2022_Bike-travel_051.gpx"
data <-get_table_from_gpx(gpx)
data
data2 <- get_enriched_gpx_table(data)
data2
bbox <- get_bbox_from_gpx_table(data)
bbox
el_mat <- get_elevdata_from_bbox(databbox)
databbox
databbox <- get_bbox_from_gpx_table(data)
databbox
el_mat <- get_elevdata_from_bbox(databbox)
SRTM<-function(lon, lat) {
stopifnot(lon >= -180 & lon <= 180)
stopifnot(lat >= -60 & lat <= 60)
rs <- raster(nrows=24, ncols=72, xmn=-180, xmx=180, ymn=-60, ymx=60 )
rowTile <- rowFromY(rs, lat)
colTile <- colFromX(rs, lon)
if (rowTile < 10) { rowTile <- paste('0', rowTile, sep='') }
if (colTile < 10) { colTile <- paste('0', colTile, sep='') }
f <- paste('srtm_', colTile, '_', rowTile, sep="")
theurl <- paste("http://srtm.csi.cgiar.org/wp-content/uploads/files/srtm_5x5/TIFF/", f, ".ZIP", sep="")
utils::download.file(url=theurl, destfile='srtm_40_0.zip', method="auto", quiet = FALSE, mode = "wb", cacheOK = TRUE)
}
el_mat <- get_elevdata_from_bbox(databbox)
getAnywhere(".SRTM")
fixInNamespace(".SRTM", "raster")
el_mat <- get_elevdata_from_bbox(databbox)
el_mat <- get_elevdata_from_bbox(databbox)
library(rayshaderanimate)
library(data.table)
gpx <- "C:/Users/doria/Downloads/GitHub/dorian.gravier.github.io/files/gpx/Bike_trip_2022/B_2022_Bike-travel_051.gpx"
data <-get_table_from_gpx(gpx)
data
data2 <- get_enriched_gpx_table(data)
data2
databbox <- get_bbox_from_gpx_table(data)
databbox
el_mat <- get_elevdata_from_bbox(databbox)
geodata::elevation_3s(lon = bbox[1, 1], lat = bbox[2, 2], path = "C:/Users/doria/Downloads")
geodata::elevation_3s(lon = databbox[1, 1], lat = databox[2, 2], path = "C:/Users/doria/Downloads")
geodata::elevation_3s(lon = databbox[1, 1], lat = databbox[2, 2], path = "C:/Users/doria/Downloads")
fixInNamespace(".SRTM", "raster")
fixInNamespace(".SRTM", "raster")
el_mat <- get_elevdata_from_bbox(databbox)
el_mat <- get_elevdata_from_bbox(databbox)
getAnywhere("raster")
install.packages("raster")
install.packages("raster")
library(rayshaderanimate)
library(data.table)
gpx <- "C:/Users/doria/Downloads/GitHub/dorian.gravier.github.io/files/gpx/Bike_trip_2022/B_2022_Bike-travel_051.gpx"
data <-get_table_from_gpx(gpx)
data
data2 <- get_enriched_gpx_table(data)
data2
databbox <- get_bbox_from_gpx_table(data)
databbox
el_mat <- get_elevdata_from_bbox(databbox)
fixInNamespace(".SRTM", "raster")
fixInNamespace(".SRTM", "raster")
el_mat <- get_elevdata_from_bbox(databbox)
fixInNamespace(".SRTM", "raster")
el_mat <- get_elevdata_from_bbox(databbox)
library(rayshaderanimate)
library(data.table)
gpx <- "C:/Users/doria/Downloads/GitHub/dorian.gravier.github.io/files/gpx/Bike_trip_2022/B_2022_Bike-travel_051.gpx"
data <-get_table_from_gpx(gpx)
data
data2 <- get_enriched_gpx_table(data)
data2
databbox <- get_bbox_from_gpx_table(data)
databbox
el_mat <- get_elevdata_from_bbox(databbox)
download.file("https://srtm.csi.cgiar.org/wp-content/uploads/files/srtm_5x5/TIFF/srtm_37_04.zip", "C:/Users/doria/Downloads/test.zip")
devtools::install_github("pokyah/raster")
remove.packages("Rcpp")
devtools::install_github("pokyah/raster")
devtools::install_github("pokyah/raster")
devtools::install_github("pokyah/raster")
install.pckages("Rcpp")
install.packages("Rcpp")
devtools::install_github("pokyah/raster")
library(raster)
library(rayshaderanimate)
library(data.table)
gpx <- "C:/Users/doria/Downloads/GitHub/dorian.gravier.github.io/files/gpx/Bike_trip_2022/B_2022_Bike-travel_051.gpx"
data <-get_table_from_gpx(gpx)
data
data2 <- get_enriched_gpx_table(data)
library(rayshaderanimate)
devtools::install_github("zappingseb/rayshaderanimate")
devtools::install_github("zappingseb/rayshaderanimate", force=T)
install.packages(c("s2",      "stringi" ,"terra",   "vctrs",   "purrr",   "curl" ,   "xfun" ,   "digest,"htmltools")
install.packages(c("s2",      "stringi" ,"terra",   "vctrs",   "purrr",   "curl" ,   "xfun" ,   "digest","htmltools")
)
install.packages(c("s2", "stringi", "terra", "vctrs", "purrr", "curl", "xfun", "digest", "htmltools"))
devtools::install_github("zappingseb/rayshaderanimate")
devtools::install_github("zappingseb/rayshaderanimate", force = T)
library(raster)
library(rayshaderanimate)
library(data.table)
gpx <- "C:/Users/doria/Downloads/GitHub/dorian.gravier.github.io/files/gpx/Bike_trip_2022/B_2022_Bike-travel_051.gpx"
data <-get_table_from_gpx(gpx)
data
data2 <- get_enriched_gpx_table(data)
data2
databbox <- get_bbox_from_gpx_table(data)
databbox
el_mat <- get_elevdata_from_bbox(databbox)
download.file("https://srtm.csi.cgiar.org/wp-content/uploads/files/srtm_5x5/TIFF/srtm_37_04.zip", "C:/Users/doria/Downloads/test.zip")
download.file("https://srtm.csi.cgiar.org/wp-content/uploads/files/srtm_5x5/TIFF/srtm_37_04.zip", "C:/Users/doria/Downloads/test.zip", mode="wb")
download.file("https://srtm.csi.cgiar.org/wp-content/uploads/files/srtm_5x5/TIFF/srtm_37_04.zip", mode="wb")
download.file("https://srtm.csi.cgiar.org/wp-content/uploads/files/srtm_5x5/TIFF/srtm_37_04.zip", tempfile(), mode="wb")
remove.packages("rayimage")
remove.packages("terra")
remove.packages("vctrs")
remove.packages("xfun")
install.packages("rayimage")
install.packages("terra")
install.packages("vctrs")
install.packages("xfun")
install.packages("rayimage")
install.packages("terra")
install.packages("vctrs")
install.packages("xfun")
devtools::install_github("tylermorganwall/rayshader")
library(rayshaderanimate)
map_to_plot <- matrix_extended %>% sphere_shade(texture = "imhof4") %>%
add_shadow(raymat, max_darken = 0.5) %>%
add_shadow(ambmat, max_darken = 0.5)
install.packages("rayshader")
library(rayshaderanimate)
library(data.table)
library(rayshader)
# library(raster)
# library(R.utils)
# reassignInPackage(name=".download", pkgName="raster", value="my.fn")
# el_mat <- get_elevdata_from_bbox(databbox)
gpx <- "C:/Users/doria/Downloads/GitHub/dorian.gravier.github.io/files/gpx/Bike_trip_2022/B_2022_Bike-travel_051.gpx"
data <-get_table_from_gpx(gpx)
data
data2 <- get_enriched_gpx_table(data)
data2
databbox <- get_bbox_from_gpx_table(data)
databbox
# bbox_map(databbox)
# getAnywhere(".download")
# el_mat <- get_elevdata_from_bbox(databbox)
my.fn <- function(aurl, filename){
cat("You wanna download: ", aurl, "\n")
cat("You wanna save it there : ", filename, "\n\n")
httr::set_config(httr::config(ssl_verifypeer=0L))
httr::GET(aurl, httr::write_disk(path = filename, overwrite = F))
}
tmpfun <- get(".download", envir = asNamespace("raster"))
environment(my.fn) <- environment(tmpfun)
attributes(my.fn) <- attributes(tmpfun)  # don't know if this is really needed
assignInNamespace(".download", my.fn, ns="raster")
# getAnywhere(".download")
el_mat <- get_elevdata_from_bbox(databbox)
el_mat
# fixInNamespace(".download", "raster")
elmat_rayshade <- unlabel_elevdata(el_mat)
elmat_rayshade
elevdata_long<- data.table(get_elevdata_long(el_mat))
# Animate GPX line on 2d plot
plot_2d_animation(gpx_table = data2, elevdata_long = elevdata_long)
matrix_extended <- elmat_rayshade
zscale <- 50
raymat <- ray_shade(matrix_extended, sunaltitude=20, zscale = zscale, lambert = TRUE)
ambmat <- ambient_shade(matrix_extended, zscale = zscale)
watermap <- detect_water(matrix_extended)
matrix_extended
map_to_plot <- matrix_extended %>% sphere_shade(texture = "imhof4") %>%
add_shadow(raymat, max_darken = 0.5) %>%
add_shadow(ambmat, max_darken = 0.5)
devtools::install_github("tylermorganwall/rayshader")
remove.packages(c("rayrender", "rayvertex", "rayshader"))
remove.packages(rayshader")
remove.packages("rayshader")
install.packages("vctrs")
install.packages("vctrs")
gsub("((?:[^_]+_){2}[^_]+)_", "\\1 ", "Hello_world_I am a good_guy and want to_save_theworl)]
)
gsub("((?:[^_]+_){2}[^_]+)_", "\\1 ", "Hello_world_I am a good_guy and want to_save_the_world")
string <- ""Hello_world_I am a good_guy and want to_save_the_world""
string <- ""Hello_world_I am a good_guy and want to_save_the_world"
string <- "Hello_world_I am a good_guy and want to_save_the_world"
gsub("((?:[^_]+_){2}[^_]+)_", "\\1 ", string)
string <- "Hello_world_I am a good_guy and want to_save_the_world"
string
gsub("((?:[^_]+_){2}[^_]+)_", "\\1 ", string)
string
gsub("^([^ - ]* - ){2}(*SKIP)(*F)| - ", " | ", string, perl=T)]
gsub("^([^ - ]* - ){2}(*SKIP)(*F)| - ", " | ", string, perl=T)]
string <- gsub("_", " - ", string)
string
gsub("^([^ - ]* - ){2}(*SKIP)(*F)| - ", " | ", string, perl=T)]
string <- "Hello_world_I am a good_guy and want to_save_the_world"
string <- gsub("_", " - ", string)
string
gsub("^([^ - ]* - ){2}(*SKIP)(*F)| - ", " | ", string, perl=T)
string <- gsub("world", " world 2", string)
string
gsub("^([^ - ]* - ){2}(*SKIP)(*F)| - ", " | ", string, perl=T)
gsub("^([^ - ][\\w\\s]* - ){2}(*SKIP)(*F)| - ", " | ", string, perl=T)
gsub("^([^ - ][\\w\\s]+ - ){2}(*SKIP)(*F)| - ", " | ", string, perl=T)
gsub("^([^ - ][\\w\\s]* - ){2}(*SKIP)(*F)| - ", " | ", string, perl=T)
string
gsub("^([^ - ][\\s\\w\\s]* - ){2}(*SKIP)(*F)| - ", " | ", string, perl=T)
gsub("^([^ - ][A-z ]* - ){2}(*SKIP)(*F)| - ", " | ", string, perl=T)
gsub("^([^ - ][A-z; ]* - ){2}(*SKIP)(*F)| - ", " | ", string, perl=T)
gsub("^([^ - ][A-z, ]* - ){2}(*SKIP)(*F)| - ", " | ", string, perl=T)
gsub("^([^ - ][\\w\\s]* - ){2}(*SKIP)(*F)| - ", " | ", string, perl=T)
gsub("^([^ - ][\\w]* - ){2}(*SKIP)(*F)| - ", " | ", string, perl=T)
gsub("^([^ - ]* - ){2}(*SKIP)(*F)| - ", " | ", string, perl=T)
gsub("^([^ - ].* - ){2}(*SKIP)(*F)| - ", " | ", string, perl=T)
gsub("^([^ - ]* - ){2}(*SKIP)(*F)| - ", " | ", string, perl=T)
gsub("^([^ - ]\\w* - ){2}(*SKIP)(*F)| - ", " | ", string, perl=T)
gsub("^([^ - ]\\w\\s* - ){2}(*SKIP)(*F)| - ", " | ", string, perl=T)
gsub("^([^ - ][\\w\\s]* - ){2}(*SKIP)(*F)| - ", " | ", string, perl=T)
string
string <- "Hello_world_I am a good_guy and want to_save_the_world"
string <- gsub("_", " - ", string)
string <- gsub("world",  world 2", string)
string <- gsub("world",  "world 2", string)
string
gsub("^([^ - ][\\w\\s]* - ){2}(*SKIP)(*F)| - ", " | ", string, perl=T)
library(ggmap)
world <- data.table(map_data("world"))
library(data.table)
world <- data.table(map_data("world"))
ggplot(all, aes(lon, lat))+
geom_map(data = world, map = world, aes(long, lat, map_id = region), color = "white", fill = "lightgray", size = 0.1)
ggplot(all, aes(lon, lat))+
geom_map(data = world[region %like% "France|Spain|Portuga"], map = world, aes(long, lat, map_id = region), color = "white", fill = "lightgray", size = 0.1)
library(ggplot2)
world <- data.table(map_data("world"))
ggplot(all, aes(lon, lat))+
geom_map(data = world, map = world, aes(long, lat, map_id = region), color = "white", fill = "lightgray", size = 0.1)
library(ggplot2)
world <- data.table(map_data("world"))
ggplot(all, aes(lon, lat))+
geom_map(data = world, map = world, aes(long, lat, map_id = region), color = "white", fill = "lightgray", size = 0.1)
ggplot(world)+
geom_map(map = world, aes(long, lat, map_id = region), color = "white", fill = "lightgray", size = 0.1)
a <- ggplot(world)+
geom_map(map = world, aes(long, lat, map_id = region), color = "white", fill = "lightgray", size = 0.1)
printfast(a, "world_map.jpg", 300,500, wdfunction = "C:/Users/doria/Downloads/GitHub/dorian.gravier.github.io/files/picture/post")
printfast <- function(plot, name, height=400, width=500, ps=12, qualityprint=100, ext = "jpg", wdfunction = getwd()) {
setwd(wdfunction)
if(ext %in% c("jpg", ".jpg", "jpeg", ".jpeg")) {
jpeg(filename=name, quality=qualityprint, pointsize = ps, height=height, width=width)
print(
plot
)
dev.off()
graphics.off()
}
if(ext %in% c("png", ".png")) {
png(filename=name, pointsize = ps, height=height, width=width)
print(
plot
)
dev.off()
graphics.off()
}
}
printfast(a, "world_map.jpg", 300,500, wdfunction = "C:/Users/doria/Downloads/GitHub/dorian.gravier.github.io/files/picture/post")
printfast(a, "world_map.jpg", 600,1000, wdfunction = "C:/Users/doria/Downloads/GitHub/dorian.gravier.github.io/files/picture/post")
a <- ggplot(world[region %like% "France|Spain|Portuga"])+
geom_map(map = world, aes(long, lat, map_id = region), color = "white", fill = "lightgray", size = 0.1)
printfast(a, "world_map2.jpg", 600, 1000, wdfunction = "C:/Users/doria/Downloads/GitHub/dorian.gravier.github.io/files/picture/post")
printfast(a, "world_map2.jpg", 600, 800, wdfunction = "C:/Users/doria/Downloads/GitHub/dorian.gravier.github.io/files/picture/post")
printfast(a, "world_map2.jpg", 600, 600, wdfunction = "C:/Users/doria/Downloads/GitHub/dorian.gravier.github.io/files/picture/post")
library(ggmap)
library(data.table)
library(ggplot2)
printfast <- function(plot, name, height=400, width=500, ps=12, qualityprint=100, ext = "jpg", wdfunction = getwd()) {
setwd(wdfunction)
if(ext %in% c("jpg", ".jpg", "jpeg", ".jpeg")) {
jpeg(filename=name, quality=qualityprint, pointsize = ps, height=height, width=width)
print(
plot
)
dev.off()
graphics.off()
}
if(ext %in% c("png", ".png")) {
png(filename=name, pointsize = ps, height=height, width=width)
print(
plot
)
dev.off()
graphics.off()
}
}
world <- data.table(map_data("world"))
a <- ggplot(world)+
geom_map(map = world, aes(long, lat, map_id = region), color = "white", fill = "lightgray", size = 0.1)
printfast(a, "world_map.jpg", 600,1000, wdfunction = "C:/Users/doria/Downloads/GitHub/dorian.gravier.github.io/files/posts/2022")
a <- ggplot(world[region %like% "France|Spain|Portuga"])+
geom_map(map = world, aes(long, lat, map_id = region), color = "white", fill = "lightgray", size = 0.1)
printfast(a, "world_map2.jpg", 600, 600, wdfunction = "C:/Users/doria/Downloads/GitHub/dorian.gravier.github.io/files/posts/2022")
library(jsonlite)
# library("rjson")
library(data.table)
library(httr)
library(rgdal)
library(ggmap)
export.gpx <- function(DATA, output) {
latslongs <- SpatialPointsDataFrame(coords=DATA[, .(lon, lat)], data=DATA, proj4string =CRS("+proj=longlat + ellps=WGS84"))
writeOGR(latslongs, dsn=output,
dataset_options="GPX_USE_EXTENSIONS=yes",layer="waypoints",driver="GPX", overwrite_layer = T, )
data <- data.table(x = readLines(output))
data <- data[grep("extension", x, invert = T)]
data[, x := gsub("ogr:url", "url", x)]
data[, x := gsub(" \\<url", " <url", x)]
data
write.table(data$x, output, quote = F, row.names = F, col.names = F)
}
data <- data.table()
code <- c("fr", "es", "pt")
link <- c("https://wwoof.fr/api/host-coordinates?searchTerm=&approvalStatus=approved&activities=&lodgings=&membershipStatus=active&isSuspended=false&isHidden=false&regionId=&capacity=1&childrenOk=false&petsOk=false&favoritesOnly=false&isNew=false&diets=&languages=&certifiedOrganic=false&type=&methodologies=&limit=5000", "https://wwoof.es/api/host-coordinates?activities=&approvalStatus=approved&capacity=1&certifiedOrganic=false&childrenOk=false&diets=&favoritesOnly=false&isHidden=false&isNew=false&isSuspended=false&languages=&limit=5000&lodgings=&membershipStatus=active&methodologies=&petsOk=false&countryId=&regionId=&searchTerm=&type=", "https://wwoof.pt/api/host-coordinates?activities=&approvalStatus=approved&capacity=1&certifiedOrganic=false&childrenOk=false&diets=&favoritesOnly=false&isHidden=false&isNew=false&isSuspended=false&languages=&limit=5000&lodgings=&membershipStatus=active&methodologies=&petsOk=false&countryId=&regionId=&searchTerm=&type=")
for(i in seq_along(code)) {
text <- content(GET(link[i]), as = "text", encoding = "UTF-8")
result <- fromJSON(text)
result2 <- as.data.table(result$features)[, Country := code[i]]
data <- rbind(data, result2)
}
all <- copy(data)
all[, lon := as.numeric(gsub("c\\(", "", gsub("(.*),(.*)", "\\1", geometry.coordinates)))]
all[, lat := as.numeric(gsub("\\)", "", gsub("(.*),(.*)", "\\2", geometry.coordinates)))]
all[Country == "fr", url := paste0("https://wwoof.fr/en/host/", properties.hostId)]
all[Country == "es", url := paste0("https://wwoof.es/en/host/", properties.hostId)]
all[Country == "pt", url := paste0("https://wwoof.pt/en/host/", properties.hostId)]
all
ggplot(all, aes(lon, lat))+geom_point()
all <- all[lat > 37]
all <- all[lon > -10]
ggplot(all, aes(lon, lat))+geom_point()
all <- all[, .(name = properties.farmName, desc = properties.shortDescription, url, lat, lon, Country)]
lschoice <- c("84", "6829", "11316", "9767", "10288", "1907", "10263", "7199", "92", "8096", "822", "5024", "4146", "6720", "13945", "7809", "3540", "5833", "5923", "7275", "7467", "7818", "7945", "3540", "967", "4353")
all[grep(paste0("host/", lschoice, "$", collapse = "|"), url), choice := 1]
all[choice == 1]
all2 <- copy(all)
all2[, lat := NULL]
all2[, lon := NULL]
all
world <- data.table(map_data("world"))
world
world[,.N, subregion]
world[region %like% "France|Spain|Portuga"]
ggplot(all, aes(lon, lat))+
geom_map(data = world[region %like% "France|Spain|Portuga"], map = world, aes(long, lat, map_id = region), color = "white", fill = "lightgray", size = 0.1)+
geom_point(aes(color=Country))
export.gpx(all[Country == "es"], "C:/Users/doria/Downloads/GitHub/dorian.gravier.github.io/files/R/gpx/202211_Wwoof_Spain.gpx")
export.gpx(all[Country == "pt"], "C:/Users/doria/Downloads/GitHub/dorian.gravier.github.io/files/R/gpx/202211_Wwoof_Portugal.gpx")
#
fr <- all[Country == "fr"]
fr
fr <- fr[.(lon, lat)]
fr <- fr[, .(lon, lat)]
fr
a <- ggplot(world[region %like% "France"])+
geom_map(map = world, aes(long, lat, map_id = region), color = "white", fill = "lightgray", size = 0.1)
printfast(a, "gpx_export.jpg", 600, 600, wdfunction = "C:/Users/doria/Downloads/GitHub/dorian.gravier.github.io/files/posts/2022")
a <- ggplot(world[region %like% "France"])+
geom_map(map = world, aes(long, lat, map_id = region), color = "white", fill = "lightgray", size = 0.1)+
geom_point(data = fr, aes(lon, lat))
a
printfast(a, "gpx_export.jpg", 600, 600, wdfunction = "C:/Users/doria/Downloads/GitHub/dorian.gravier.github.io/files/posts/2022")
