data[, ext := substr(path, nchar(path) -3, nchar(path))]
data[,.N, ext]
data <- data[ext %like% "jpg|png"]
data[, what := basename(dirname(path))]
data[, path := gsub("Lazzati_2022", "LOW", path)]
data <- data[!what %like% "Lazzati"]
data
data[, filename := substr(basename(path), 1, nchar(basename(path)) -4)]
data
source(paste0(rootpath, "Dorian/BM_Function_v01.r"), encoding="utf-8")
create.html.picture.table.general(data, x = "filename", y = "what", height = 80, value.var = "path", filename = "C:/Users/doria/Downloads/Lazzati_2022/test.html", nrow.per.file = "")
library(raster)
# # prepare nasa data
# rr <- raster('C:/Users/doria/Downloads/Outdoor/SRTM/merge_n30w030_n30e000.tif')
# plot(rr)
ll <- list.files("C:/Users/doria/Downloads/GDEM/", full.names = T, pattern = "tif$")
ll
library(data.table)
library(ggplot2)
zoomman <- function(loc, zoom) {
lon_span <- 360 / 2^zoom
lat_span <- 180 / 2^zoom
lon_bounds <- c(loc[1] - lon_span / 2, loc[1] + lon_span / 2)
lat_bounds <- c(loc[2] - lat_span / 2, loc[2] + lat_span / 2)
return(data.table(lon=lon_bounds, lat=lat_bounds))
# source: # https://www.r-bloggers.com/2019/04/zooming-in-on-maps-with-sf-and-ggplot2/
}
get.contour <- function(raster.file, level.u = 100) {
# use in ggplot contour
r <- raster(raster.file)
rrc <- rasterToContour(r,  level=seq(0, 5000, level.u))
rrc2 <- st_as_sf(rrc)
rrc3 <- data.table(st_coordinates(rrc2))
rrc3[, group := paste0(L1, "-", L2)]
return(rrc3)
}
# choose your til file and the level of detail of the contour lines (here 100m)
rr3 <- get.contour('C:/Users/doria/Downloads/Outdoor/SRTM/nasa_test_01.tif', 100)
library(sf)
lat_span <- 180 / 2^zoom
lon_bounds <- c(loc[1] - lon_span / 2, loc[1] + lon_span / 2)
lat_bounds <- c(loc[2] - lat_span / 2, loc[2] + lat_span / 2)
return(data.table(lon=lon_bounds, lat=lat_bounds))
# source: # https://www.r-bloggers.com/2019/04/zooming-in-on-maps-with-sf-and-ggplot2/
}
get.contour <- function(raster.file, level.u = 100) {
# use in ggplot contour
r <- raster(raster.file)
rrc <- rasterToContour(r,  level=seq(0, 5000, level.u))
rrc2 <- st_as_sf(rrc)
rrc3 <- data.table(st_coordinates(rrc2))
rrc3[, group := paste0(L1, "-", L2)]
return(rrc3)
}
# choose your til file and the level of detail of the contour lines (here 100m)
rr3 <- get.contour('C:/Users/doria/Downloads/Outdoor/SRTM/nasa_test_01.tif', 100)
# get your zoom center one 1 point
point.choosen <- c(2, 31)
zoom.choosen <- zoomman(point.choosen, 8)
world <- data.table(map_data("world"))
a <- ggplot()+
geom_polygon(data=world, aes(long, lat, group = group), colour='white', fill=NA)+
b <- a+ coord_cartesian(xlim = zlast$lon, ylim = zlast$lat)
a <- ggplot()+
geom_polygon(data=world, aes(long, lat, group = group), colour='white', fill=NA)
a
a <- ggplot()+
geom_polygon(data=world, aes(long, lat, group = group), fill=NA)
a
a <- ggplot()+
geom_polygon(data=world, aes(long, lat, group = group),color = "black", fill=NA)
a
printfast(c, "C:/Users/doria/Downloads/GitHub/dorian.gravier.github.io/files/posts/2023world.png", ext = "png", height = 300, width = 500)
printfast <- function(plot, name, height=400, width=500, ps=12, qualityprint=100, ext = "jpg", wdfunction = getwd()) {
setwd(wdfunction)
if(ext %in% c("jpg", ".jpg", "jpeg", ".jpeg")) {
jpeg(filename=name, quality=qualityprint, pointsize = ps, height=height, width=width)
print(
plot
)
dev.off()
graphics.off()
}
if(ext %in% c("png", ".png")) {
png(filename=name, pointsize = ps, height=height, width=width)
print(
plot
)
dev.off()
graphics.off()
}
}
printfast(c, "C:/Users/doria/Downloads/GitHub/dorian.gravier.github.io/files/posts/2023world.png", ext = "png", height = 300, width = 500)
printfast(a, "C:/Users/doria/Downloads/GitHub/dorian.gravier.github.io/files/posts/2023world.png", ext = "png", height = 300, width = 500)
printfast(a, "C:/Users/doria/Downloads/GitHub/dorian.gravier.github.io/files/posts/2023/world.png", ext = "png", height = 500, width = 800)
# get your zoom center one 1 point
point.choosen <- c(2, 31)
zoom.choosen <- zoomman(point.choosen, 8)
geom_path(data = rr3, aes(x = X, y = Y, group=group), color = "grey20")+
b <- a+ coord_cartesian(xlim = zoom.choosen$lon, ylim = zoom.choosen$lat)
a <- ggplot()+
geom_polygon(data=world, aes(long, lat, group = group),color = "black", fill=NA)
a
geom_path(data = rr3, aes(x = X, y = Y, group=group), color = "grey20")+
b <- a + coord_cartesian(xlim = zoom.choosen$lon, ylim = zoom.choosen$lat)
zoom.choosen$lon
a <- ggplot(world, aes(long, lat, group = group))+
geom_polygon(color = "black", fill=NA)
a
geom_path(data = rr3, aes(x = X, y = Y, group=group), color = "grey20")+
b <- a + coord_cartesian(xlim = zoom.choosen$lon, ylim = zoom.choosen$lat)
a <- ggplot(world, aes(long, lat, group = group))+
geom_polygon(color = "black", fill=NA)
a
b <- a + coord_cartesian(xlim = zoom.choosen$lon, ylim = zoom.choosen$lat)
b
zoom.choosen <- zoomman(point.choosen,5)
b <- a + coord_cartesian(xlim = zoom.choosen$lon, ylim = zoom.choosen$lat)
b
zoom.choosen <- zoomman(point.choosen,2)
world <- data.table(map_data("world"))
b <- a + coord_cartesian(xlim = zoom.choosen$lon, ylim = zoom.choosen$lat)
b
# get your zoom center one 1 point
point.choosen <- c(0,43)
zoom.choosen <- zoomman(point.choosen,2)
zoom.choosen <- zoomman(point.choosen,5)
b <- a + coord_cartesian(xlim = zoom.choosen$lon, ylim = zoom.choosen$lat)
b
zoom.choosen <- zoomman(point.choosen,4)
b <- a + coord_cartesian(xlim = zoom.choosen$lon, ylim = zoom.choosen$lat)
b
printfast(b, "C:/Users/doria/Downloads/GitHub/dorian.gravier.github.io/files/posts/2023/world2.png", ext = "png", height = 500, width = 800)
ll <- list.files("C:/Users/doria/Downloads/GDEM/", full.names = T, pattern = "tif$")
ll
for(i in seq_along(ll)) {
if(i == 1){
r <- raster(ll[i])
} else {
r0 <- raster(ll[i])
r <- merge(r,r0)
}
cat(i, " / ", length(ll), "\n")
}
ll[30]
ll[31]
plot(raster(ll[31]))
# setup
rm(list = ls())
if( paste0(Sys.info()[4]) == 'DESKTOP-MG495PG' ) {
rootpath <- 'C:/Users/doria/Dropbox/Shared_Dorian/'
Sys.setlocale('LC_ALL', 'German')
} else {
if( paste0(Sys.info()[4]) == 'DORIANSRECHNER' ) {
rootpath <- 'C:/Users/dorian.BSPM/Dropbox/Shared_Dorian/'
} else {
rootpath <- 'C:/Users/buero.BSPM/Dropbox/Shared_Dorian/'
}
}
source(paste0(rootpath, "Dorian/BM_Function_v01.r"), encoding="utf-8")
temp <- readLines("C:/Users/doria/Downloads/refugio.txt")
temp <- readLines("C:/Users/doria/Downloads/refugio.txt")
temp
library(rjson)
fromJSON("C:/Users/doria/Downloads/refugio.txt")
fromJSON("C:/Users/doria/Downloads/refugio.txt")
fromJSON("C:/Users/doria/Downloads/refugio.txt")
fromJSON(file="C:/Users/doria/Downloads/refugio.txt")
fromJSON(file="C:/Users/doria/Downloads/refugio.txt")
fromJSON(file="C:/Users/doria/Downloads/refugio.txt")
fromJSON(file="C:/Users/doria/Downloads/refugio.txt")
temp <- readLines("C:/Users/doria/Downloads/refugio.txt")
js_typeof()
library(V8)
install.packages("V8")
library(V8)
js_typeof(temp)
library(js)
install.packages("js")
library(js)
js_typeof(temp)
temp <- readLines("C:/Users/doria/Downloads/refugio.txt")
js_typeof(temp)
temp <- readLines("C:/Users/doria/Downloads/refugio.txt")
fromJSON(file="C:/Users/doria/Downloads/refugio.txt")
library(V8)
library(js)
js_typeof(temp)
esprima_tokenize(temp)
esprima_parse(temp)
esprima_tokenize(temp)
temp <- readLines("C:/Users/doria/Downloads/refugio.txt")
esprima_parse(temp)
esprima_tokenize(temp)
fromJSON(temp)
temp <- readLines("C:/Users/doria/Downloads/refugio.txt")
fromJSON(temp)
fromJSON(file="C:/Users/doria/Downloads/refugio.txt")
data <- data.table()
temp <- fromJSON(file="C:/Users/doria/Downloads/refugio.txt")
length(temp)
data <- data.table()
length(temp)
for(i in seq_along(temp)) {
data[i, Name := temp[[i]]$name]
data[i, ID := temp[[i]]$refugio_id]
data[i, Description := temp[[i]]$description]
data[i, lat := temp[[i]]$latitude]
data[i, lon := temp[[i]]$longitude]
}
for(i in 1:length(temp)) {
data[i, Name := temp[[i]]$name]
data[i, ID := temp[[i]]$refugio_id]
data[i, Description := temp[[i]]$description]
data[i, lat := temp[[i]]$latitude]
data[i, lon := temp[[i]]$longitude]
}
data <- data.table()
for(i in 1:length(temp)) {
data[i, Name := temp[[i]]$name]
data[i, ID := temp[[i]]$refugio_id]
data[i, Description := temp[[i]]$description]
data[i, lat := temp[[i]]$latitude]
data[i, lon := temp[[i]]$longitude]
}
data <- data.table(row = 1:length(temp))
length(temp)
for(i in 1:length(temp)) {
data[i, Name := temp[[i]]$name]
data[i, ID := temp[[i]]$refugio_id]
data[i, Description := temp[[i]]$description]
data[i, lat := temp[[i]]$latitude]
data[i, lon := temp[[i]]$longitude]
}
library(sp)
data
data
data <- data.table(row = 1:length(temp))
length(temp)
for(i in 1:length(temp)) {
data[i, Name := temp[[i]]$name]
data[i, ID := temp[[i]]$refugio_id]
data[i, slug := temp[[i]]$slug]
data[i, Description := temp[[i]]$description]
data[i, lat := temp[[i]]$latitude]
data[i, lon := temp[[i]]$longitude]
}
data[, url := p0("http://www.refugioslibres.com/index.php/refugio/", slug)]
library(sp)
latslongs <- SpatialPointsDataFrame(coords=data[, .(lon, lat)], data=data[, .(description, name, url)], proj4string =CRS("+proj=longlat + ellps=WGS84"))
data[,lon := as.numeric(lon)]
data[,lat := as.numeric(lat)]
library(sp)
latslongs <- SpatialPointsDataFrame(coords=data[, .(lon, lat)], data=data[, .(description, name, url)], proj4string =CRS("+proj=longlat + ellps=WGS84"))
latslongs <- SpatialPointsDataFrame(coords=data[, .(lon, lat)], data=data[, .(Description, Name, url)], proj4string =CRS("+proj=longlat + ellps=WGS84"))
newfile <- "C:/Users/doria/Downloads/Outdoor/Refugios/20230506_refugioslibre.gpx"
writeOGR(latslongs, dsn=newfile,
dataset_options="GPX_USE_EXTENSIONS=yes",layer="waypoints",driver="GPX", overwrite_layer = T)
library(rgdal)
writeOGR(latslongs, dsn=newfile,
dataset_options="GPX_USE_EXTENSIONS=yes",layer="waypoints",driver="GPX", overwrite_layer = T)
data <- data.table(x = readLines(newfile, encoding = "UTF8"))
data[grep("extensions>", x)]
data <- data[grep("extensions>", x, invert = T)]
data[, x := gsub("ogr:url", "url", x)]
data
data[, x := gsub("  <url", "<url", x)]
write.table(data$x, newfile, quote = F, row.names = F, col.names = F)
ggplot(data, aes(lat, lon))+ geom_point
ggplot(data, aes(lat, lon))+ geom_point()
temp <- fromJSON(file="C:/Users/doria/Downloads/refugio.txt")
data <- data.table(row = 1:length(temp))
length(temp)
for(i in 1:length(temp)) {
data[i, Name := temp[[i]]$name]
data[i, ID := temp[[i]]$refugio_id]
data[i, slug := temp[[i]]$slug]
data[i, Description := temp[[i]]$description]
data[i, lat := temp[[i]]$latitude]
data[i, lon := temp[[i]]$longitude]
}
data[, url := p0("http://www.refugioslibres.com/index.php/refugio/", slug)]
data[,lon := as.numeric(lon)]
data[,lat := as.numeric(lat)]
world <- data.table(map_data("world"))
world2 <- world[region %like% "Spain"]
ggplot(data, aes(lat, lon))+ geom_point()+
geom_polygon(data=world2, aes(long, lat, group = group), colour='black', fill=NA)+
library(sp)
ggplot(data, aes(lat, lon))+ geom_point()+
geom_polygon(data=world2, aes(long, lat, group = group), colour='black', fill=NA)
data <- data[!lat > 75]
ggplot(data, aes(lat, lon))+ geom_point()+
geom_polygon(data=world2, aes(long, lat, group = group), colour='black', fill=NA)
ggplot(data, aes(lon, lat))+ geom_point()+
geom_polygon(data=world2, aes(long, lat, group = group), colour='black', fill=NA)
latslongs <- SpatialPointsDataFrame(coords=data[, .(lon, lat)], data=data[, .(Description, Name, url)], proj4string =CRS("+proj=longlat + ellps=WGS84"))
newfile <- "C:/Users/doria/Downloads/Outdoor/Refugios/20230506_refugioslibre.gpx"
writeOGR(latslongs, dsn=newfile,
dataset_options="GPX_USE_EXTENSIONS=yes",layer="waypoints",driver="GPX", overwrite_layer = T)
data2 <- data.table(x = readLines(newfile, encoding = "UTF8"))
data2[grep("extensions>", x)]
data2 <- data2[grep("extensions>", x, invert = T)]
data2[, x := gsub("ogr:url", "url", x)]
data2
data2[, x := gsub("  <url", "<url", x)]
write.table(data2$x, newfile, quote = F, row.names = F, col.names = F)
remotes::install_github("swarm-lab/trackR")
install.package("devtools")
install.packages("devtools")
install.packages("ROpenCVLite")
remotes::install_github("swarm-lab/trackR")
install.packages("trackR")
install.packages("plotKML", "terra")
library(plotKML)
library(ggplot2)
theme_set(theme_bw())
library(formattable)
library(geosphere)
library(gridExtra)
library(data.table)
wd <- "C:/Users/doria/Downloads/GitHub/dorian.gravier.github.io/files"
outjs <- "C:/Users/doria/Downloads/GitHub/dorian.gravier.github.io/js/Personal/gpx_biketrip2022.js"
if( !dir.exists(wd) ) {
wd <- "C:/Users/doria/Downloads/GitHub/dorian.gravier.github.io/files"
outjs <- "C:/Users/doria/Downloads/GitHub/dorian.gravier.github.io/js/Personal/gpx_biketrip2022.js"
}
setwd(wd)
# wildcamping position
readGPX("C:/Users/doria/Downloads/Zelt.gpx")$waypoints
tent <- data.table(readGPX("C:/Users/doria/Downloads/GitHub/dorian.gravier.github.io/files/gpx/Zelt.gpx")$waypoints)
all <- list()
# wildcamping position
# readGPX("C:/Users/doria/Downloads/Zelt.gpx")$waypoints
tent <- data.table(readGPX("C:/Users/doria/Downloads/GitHub/dorian.gravier.github.io/files/gpx/Zelt.gpx")$waypoints)
all <- list()
for(i in 1:nrow(tent)){
temp <- list(type = "Feature",
properties = list(popupContent = tent[i]$name),
geometry = list(type = "Point", coordinates = c(tent[i]$lon, tent[i]$lat)))
all <- c(all, list(temp))
}
sleepjson <- paste0("var sleep =", toJSON(all, auto_unbox = T))
install.packages("toJSON")
library(toJSON)
library(RJSONIO)
install.packages('RJSONIO')
library(RJSONIO)
wd <- "C:/Users/doria/Downloads/GitHub/dorian.gravier.github.io/files"
outjs <- "C:/Users/doria/Downloads/GitHub/dorian.gravier.github.io/js/Personal/gpx_biketrip2022.js"
if( !dir.exists(wd) ) {
wd <- "C:/Users/doria/Downloads/GitHub/dorian.gravier.github.io/files"
outjs <- "C:/Users/doria/Downloads/GitHub/dorian.gravier.github.io/js/Personal/gpx_biketrip2022.js"
}
setwd(wd)
# wildcamping position
# readGPX("C:/Users/doria/Downloads/Zelt.gpx")$waypoints
tent <- data.table(readGPX("C:/Users/doria/Downloads/GitHub/dorian.gravier.github.io/files/gpx/Zelt.gpx")$waypoints)
all <- list()
for(i in 1:nrow(tent)){
temp <- list(type = "Feature",
properties = list(popupContent = tent[i]$name),
geometry = list(type = "Point", coordinates = c(tent[i]$lon, tent[i]$lat)))
all <- c(all, list(temp))
}
sleepjson <- paste0("var sleep =", toJSON(all, auto_unbox = T))
sleepjson
# functions
printfast <- function(plot, name, height=400, width=500, ps=12, qualityprint=100, ext = "jpg", wdfunction = getwd()) {
setwd(wdfunction)
if(ext %in% c("jpg", ".jpg", "jpeg", ".jpeg")) {
jpeg(filename=name, quality=qualityprint, pointsize = ps, height=height, width=width)
print(
plot
)
dev.off()
graphics.off()
}
if(ext %in% c("png", ".png")) {
png(filename=name, pointsize = ps, height=height, width=width)
print(
plot
)
dev.off()
graphics.off()
}
}
lis <- data.table(path = list.files(wd, pattern = "\\.gpx", full = T, recursive = T))
lis <- lis[!path %like% "gpx.reg"]
lis <- lis[!path %like% "_site"]
lis <- lis[path %like% "Bike_trip_2022|Stop"]
lis[, path2 := gsub(paste0(dirname(wd), "/"), "", path) ]
lis[, dir := dirname(path2) ]
lisdir <- unique(lis$dir)
lisdir
write("// create file", file = outjs)
for(i in seq_along(lisdir)) {
if( lisdir[i] != "files/gpx" ) {
if( basename(lisdir[i]) == "Project" ) {
varname <- paste0(basename(dirname(lisdir[i])), basename(lisdir[i]))
} else {
varname <- basename(lisdir[i])
}
lis2 <- lis[dir == lisdir[i]]
for( j in 1:nrow(lis2)) {
if( j == 1) {
write(paste0("var ", varname, " = ['", lis2[j, path2], "',"), file = outjs, append = T)
} else if( j == nrow(lis2)) {
write(paste0("'", lis2[j, path2], "']\n"), file = outjs, append = T)
} else {
write(paste0("'", lis2[j, path2], "',"), file = outjs, append = T)
}
}
}
}
write(sleepjson, file = outjs, append = T)
files <- lis[!dir %like% "Stop"]$path
all <- data.table()
for (i in 1:length(files)) {
print(files[i])
route <- data.table(readGPX(files[i])$tracks[[1]][[1]])
route[, file := files[i]]
route[, dist := 0]
route[, extensions:=NULL]
route[2:nrow(route), dist := distHaversine(route[,.(lon, lat)])/1000]
all <- rbind(all, route)
}
all[, time2 := strptime(substr(time, 1, 10), format = "%Y-%m-%d")]
all[, ele := as.numeric(ele)]
all[, ele2 := ele-data.table::shift(ele)]
all[, ele2type := "Ascent"]
all[ele2<=0, ele2type := "Descent"]
all
all[, distfs := cumsum(dist)]
all
distanceTT <- round(sum(all$dist, na.rm = T))
distanceTT
daysTT <- as.numeric(round(max(all$time2)-min(all$time2)))
daysTT
daysBike <- length(unique(all$time2))
daysBike
TTa <- sum(all[ele2type == "Ascent"]$ele2, na.rm = T)
TTa
TTb <- sum(all[ele2type == "Descent"]$ele2, na.rm = T)
TTb
# create plots
b <- ggplot(all, aes(time2, dist))+stat_summary(fun = "sum", geom = "bar")+xlab("Date")+ylab("Distance (km)")+labs(title="Distance per day")+theme(text = element_text(size =15))+scale_y_continuous(sec.axis=dup_axis())
c <- ggplot(all, aes(time2, ele2))+stat_summary(aes(fill=ele2type),fun = "sum", geom = "bar")+xlab("Date")+ylab("Elevation (m)")+labs(title="Ascent and descent per day")+theme(text = element_text(size =15))+scale_y_continuous(sec.axis=dup_axis())
a <- ggplot(all, aes(distfs, ele))+geom_line()+ylab("Altitude (m)")+xlab("Distance (km)")+labs(title="Elevation profile for the bike trip")+theme(text = element_text(size =15))+scale_y_continuous(sec.axis=dup_axis())
a
printfast(a, "Elevation.jpg", 300,1200, wdfunction = "C:/Users/doria/Downloads/GitHub/dorian.gravier.github.io/files/picture/BikeTrip2022")
printfast(b, "Distance.jpg", 300,1200, wdfunction = "C:/Users/doria/Downloads/GitHub/dorian.gravier.github.io/files/picture/BikeTrip2022")
printfast(c, "Ascent.jpg", 300,1200, wdfunction = "C:/Users/doria/Downloads/GitHub/dorian.gravier.github.io/files/picture/BikeTrip2022")
info <- data.table(What=c("Distance total (km)",
"Days spent on the bike",
"Days gone",
"Total ascent (m)",
"Total descent (m)"), value = c(distanceTT,
daysBike,
daysTT,
TTa,
TTb))
info[, value := round(value)]
info
png("C:/Users/doria/Downloads/GitHub/dorian.gravier.github.io/files/picture/BikeTrip2022/Info.png", height = 300, width = 500, bg = "#424242")
grid.table(info, theme=ttheme_minimal(base_colour="#f0e3cb", base_size = 20), rows=rep("", nrow(info)))
# formattable(info)
dev.off()
library(rayshaderanimate)
library(data.table)
wd <- "C:/Users/doria/Downloads/GitHub/dorian.gravier.github.io/files"
outjs <- "C:/Users/doria/Downloads/GitHub/dorian.gravier.github.io/js/Personal/gpx.js"
if( !dir.exists(wd) ) {
wd <- "C:/Users/doria/Downloads/GitHub/dorian.gravier.github.io/files"
outjs <- "C:/Users/doria/Downloads/GitHub/dorian.gravier.github.io/js/Personal/gpx.js"
}
setwd(wd)
library(data.table)
wd <- "C:/Users/doria/Downloads/GitHub/dorian.gravier.github.io/files"
outjs <- "C:/Users/doria/Downloads/GitHub/dorian.gravier.github.io/js/Personal/gpx.js"
if( !dir.exists(wd) ) {
wd <- "C:/Users/doria/Downloads/GitHub/dorian.gravier.github.io/files"
outjs <- "C:/Users/doria/Downloads/GitHub/dorian.gravier.github.io/js/Personal/gpx.js"
}
setwd(wd)
lis <- data.table(path = list.files(wd, pattern = "\\.gpx", full = T, recursive = T))
lis <- lis[!path %like% "gpx.reg|_site|Stop|R\\/gpx"]
# lis <- lis[!path %like% "Bike_trip_2022"]
lis[, path2 := gsub(paste0(dirname(wd), "/"), "", path) ]
lis[, dir := dirname(path2) ]
lisdir <- unique(lis$dir)
lisdir
write("// create file", file = outjs)
for(i in seq_along(lisdir)) {
if( lisdir[i] != "files/gpx" ) {
if( basename(lisdir[i]) == "Project" ) {
varname <- paste0(basename(dirname(lisdir[i])), basename(lisdir[i]))
} else {
varname <- basename(lisdir[i])
}
lis2 <- lis[dir == lisdir[i]]
for( j in 1:nrow(lis2)) {
if( j == 1) {
write(paste0("var ", varname, " = ['", lis2[j, path2], "',"), file = outjs, append = T)
} else if( j == nrow(lis2)) {
write(paste0("'", lis2[j, path2], "']\n"), file = outjs, append = T)
} else {
write(paste0("'", lis2[j, path2], "',"), file = outjs, append = T)
}
}
}
}
