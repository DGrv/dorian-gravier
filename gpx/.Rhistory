cat("To create a link add column in your data : <a href = 'file:///X:/Screening/...'>title link</a>\n")
tabhtml <- tableHTML(data,
rownames = FALSE,
caption = caption,
theme="default") %>%
add_css_table(css = list('border', color.line)) %>%
add_css_table(css = list('text-align', text.align)) %>%
add_css_table(css = list('font-family', font.family)) %>%
add_css_table(css = list('font-size', font.size)) %>%
add_css_table(css = list('color', color.text))
write_tableHTML(tabhtml, file = paste0(wdfunction, "/", filename, ".html"))
temp <- suppressWarnings(readLines(paste0(wdfunction, "/", filename, ".html")))
temp <- gsub( "&#62;", ">", temp)
temp <-  gsub( "&#60;", "<", temp)
temp <- c("<body bgcolor='", color.bg, "'>", temp)
writeLines(temp, paste0(wdfunction, "/", filename, ".html"))
}
# Parameters (where in function normally, but I detail the process --------
patternlist <- ".jpg"
regexjpeg <- "([0-9]*)(.*)_(.*)" # this the regex expression regarding the name of the files
regexposID <- "\\1" # position of the different variable I want to extract from the name
regexposWhat <- "\\2"
regexposField <- "\\3"
regexposZ <- "\\3"
formulaPV <- "row+Field~col+What" # then the dcast formula regarding how to arrange the pictures
pixelimg <- 150 # size in html but the picture are kept of real resolution so you can zoom
base64 <-  F
listimg<- data.table(path = list.files(wd, full.names = T))
listimg[, ID := gsub(paste0(regexjpeg, patternlist), regexposID, basename(path))]
listimg[, What := gsub(paste0(regexjpeg, patternlist), regexposWhat, basename(path))]
listimg[, Field := as.numeric(gsub(paste0(regexjpeg,patternlist), regexposField, basename(path)))]
listimg[, Z := as.numeric(gsub(paste0(regexjpeg,patternlist), regexposZ, basename(path)))]
listimg[, row := LETTERS[as.numeric(substr(ID, 1, 3))]]
listimg[, col := as.numeric(substr(ID, 4, 6))]
if( base64 ) {
for(i in 1:nrow(listimg) ) {
listimg[i, code := paste0(addimgbalise(image_uri(path), pixelimg), "\n", row, col, "-", Field, "-", What)]
}
} else {
listimg[, code := paste0(addimgbalise(path, pixelimg), "\n", row, col, "-", Field, "-", What)]
}
listimg3 <- dcast(listimg, as.formula(formulaPV), value.var = "code")
listimg3 <- data.frame(listimg3)
listimg3[nrow(listimg3)+1,] <- colnames(listimg3)
write.html.link(data = listimg3, filename = "Picture_grid", caption = paste0("Picture_grid", " - ", formulaPV), wdfunction = dirname(wd))
# Some other example ------------------------------------------------------
formulaPV <- "row+Field+What~col" # then the dcast formula regarding how to arrange the pictures
listimg3 <- dcast(listimg, as.formula(formulaPV), value.var = "code")
listimg3 <- data.frame(listimg3)
listimg3[nrow(listimg3)+1,] <- colnames(listimg3)
write.html.link(data = listimg3, filename = "Picture_grid_other_formula", caption = paste0("Picture_grid", " - ", formulaPV), wdfunction = dirname(wd))
# base64
for(i in 1:nrow(listimg) ) {
listimg[i, code := paste0(addimgbalise(image_uri(path), pixelimg), "\n", row, col, "-", Field, "-", What)]
}
listimg3 <- dcast(listimg, as.formula(formulaPV), value.var = "code")
listimg3 <- data.frame(listimg3)
listimg3[nrow(listimg3)+1,] <- colnames(listimg3)
write.html.link(data = listimg3, filename = "Picture_grid_base64", caption = paste0("Picture_grid", " - ", formulaPV), wdfunction = dirname(wd))
format(Sys.time(),"%Y%m%d")
#+ echo=F
library(ggplot2)
install.packages("ggplot2")
#+ echo=F
library(ggplot2)
library(data.table)
install.packages(c("data.table", "rmarkdown", "knitr"))
library(rmarkdown)
rmarkdown::render('H:/Data/Cybio/CBC/CyBiDrops/BU_Script/Cybio_Drop_Calibration_v01.R')
install.packages("xlsx")
library(rmarkdown)
rmarkdown::render('H:/Data/Cybio/CBC/CyBiDrops/BU_Script/Cybio_Drop_Calibration_v01.R')
install.packages("openxlsx")
library(rmarkdown)
rmarkdown::render('H:/Data/Cybio/CBC/CyBiDrops/BU_Script/Cybio_Drop_Calibration_v01.R')
library(rmarkdown)
rmarkdown::render('H:/Data/Cybio/CBC/CyBiDrops/BU_Script/Cybio_Drop_Calibration_v01.R')
library(openxlsx)
library(rmarkdown)
rmarkdown::render('H:/Data/Cybio/CBC/CyBiDrops/BU_Script/Cybio_Drop_Calibration_v01.R')
library(xlsx)
library(rmarkdown)
rmarkdown::render('H:/Data/Cybio/CBC/CyBiDrops/BU_Script/Cybio_Drop_Calibration_v01.R')
library(rmarkdown)
rmarkdown::render('H:/Data/Cybio/CBC/CyBiDrops/BU_Script/Cybio_Drop_Calibration_v01.R')
library(rmarkdown)
rmarkdown::render('H:/Data/Cybio/CBC/CyBiDrops/BU_Script/Cybio_Drop_Calibration_v01.R')
library(rmarkdown)
rmarkdown::render('H:/Data/Cybio/CBC/CyBiDrops/BU_Script/Cybio_Drop_Calibration_v01.R')
library(rmarkdown)
rmarkdown::render('H:/Data/Cybio/CBC/CyBiDrops/BU_Script/Cybio_Drop_Calibration_v01.R')
library(rmarkdown)
rmarkdown::render('H:/Data/Cybio/CBC/CyBiDrops/BU_Script/Cybio_Drop_Calibration_v01.R')
library(rmarkdown)
# rmarkdown::render('H:/Data/Cybio/CBC/CyBiDrops/BU_Script/Cybio_Drop_Calibration_v01.R')
rmarkdown::render('H:/Data/Cybio/CBC/CyBiDrops/BU_Script/test.R')
install.packages("randomForest")
library(rmarkdown)
# rmarkdown::render('H:/Data/Cybio/CBC/CyBiDrops/BU_Script/Cybio_Drop_Calibration_v01.R')
rmarkdown::render('H:/Data/Cybio/CBC/CyBiDrops/BU_Script/test.R')
library(rmarkdown)
rmarkdown::render('H:/Data/Cybio/CBC/CyBiDrops/BU_Script/Cybio_Drop_Calibration_v01.R')
# rmarkdown::render('H:/Data/Cybio/CBC/CyBiDrops/BU_Script/test.R')
library(rmarkdown)
rmarkdown::render('H:/Data/Cybio/CBC/CyBiDrops/BU_Script/Cybio_Drop_Calibration_v01.R')
# rmarkdown::render('H:/Data/Cybio/CBC/CyBiDrops/BU_Script/test.R')
library(rmarkdown)
rmarkdown::render('H:/Data/Cybio/CBC/CyBiDrops/BU_Script/Cybio_Drop_Calibration_v01.R')
# rmarkdown::render('H:/Data/Cybio/CBC/CyBiDrops/BU_Script/test.R')
library(rmarkdown)
rmarkdown::render('H:/Data/Cybio/CBC/CyBiDrops/BU_Script/Cybio_Drop_Calibration_v01.R')
# rmarkdown::render('H:/Data/Cybio/CBC/CyBiDrops/BU_Script/test.R')
library(rmarkdown)
# rmarkdown::render('H:/Data/Cybio/CBC/CyBiDrops/BU_Script/Cybio_Drop_Calibration_v01.R')
rmarkdown::render('H:/Data/Cybio/CBC/CyBiDrops/BU_Script/test.R')
library(rmarkdown)
# rmarkdown::render('H:/Data/Cybio/CBC/CyBiDrops/BU_Script/Cybio_Drop_Calibration_v01.R')
rmarkdown::render('H:/Data/Cybio/CBC/CyBiDrops/BU_Script/test.R')
library(rmarkdown)
# rmarkdown::render('H:/Data/Cybio/CBC/CyBiDrops/BU_Script/Cybio_Drop_Calibration_v01.R')
rmarkdown::render('H:/Data/Cybio/CBC/CyBiDrops/BU_Script/test.R')
library(rmarkdown)
rmarkdown::render('H:/Data/Cybio/CBC/CyBiDrops/BU_Script/Cybio_Drop_Calibration_v01.R')
# rmarkdown::render('H:/Data/Cybio/CBC/CyBiDrops/BU_Script/test.R')
library(rmarkdown)
rmarkdown::render('H:/Data/Cybio/CBC/CyBiDrops/BU_Script/Cybio_Drop_Calibration_v01.R')
# rmarkdown::render('H:/Data/Cybio/CBC/CyBiDrops/BU_Script/test.R')
cSolu
cPump
library(rmarkdown)
rmarkdown::render('H:/Data/Cybio/CBC/CyBiDrops/BU_Script/Cybio_Drop_Calibration_v01.R')
# rmarkdown::render('H:/Data/Cybio/CBC/CyBiDrops/BU_Script/test.R')
library(rmarkdown)
rmarkdown::render('H:/Data/Cybio/CBC/CyBiDrops/BU_Script/Cybio_Drop_Calibration_v01.R')
# rmarkdown::render('H:/Data/Cybio/CBC/CyBiDrops/BU_Script/test.R')
library(rmarkdown)
rmarkdown::render('H:/Data/Cybio/CBC/CyBiDrops/BU_Script/Cybio_Drop_Calibration_v01.R')
# rmarkdown::render('H:/Data/Cybio/CBC/CyBiDrops/BU_Script/test.R')
library(rmarkdown)
rmarkdown::render('H:/Data/Cybio/CBC/CyBiDrops/BU_Script/Cybio_Drop_Calibration_v01.R')
# rmarkdown::render('H:/Data/Cybio/CBC/CyBiDrops/BU_Script/test.R')
library(rmarkdown)
rmarkdown::render('H:/Data/Cybio/CBC/CyBiDrops/BU_Script/Cybio_Drop_Calibration_v01.R')
# rmarkdown::render('H:/Data/Cybio/CBC/CyBiDrops/BU_Script/test.R')
cPump
cSolu$Solution
print(cSolu$Solution)
as.character(cSolu$Solution)
library(rmarkdown)
rmarkdown::render('H:/Data/Cybio/CBC/CyBiDrops/BU_Script/Cybio_Drop_Calibration_v01.R')
# rmarkdown::render('H:/Data/Cybio/CBC/CyBiDrops/BU_Script/test.R')
library(rmarkdown)
rmarkdown::render('H:/Data/Cybio/CBC/CyBiDrops/BU_Script/Cybio_Drop_Calibration_v01.R')
# rmarkdown::render('H:/Data/Cybio/CBC/CyBiDrops/BU_Script/test.R')
library(rmarkdown)
rmarkdown::render('H:/Data/Cybio/CBC/CyBiDrops/BU_Script/Cybio_Drop_Calibration_v01.R')
# rmarkdown::render('H:/Data/Cybio/CBC/CyBiDrops/BU_Script/test.R')
library(rmarkdown)
rmarkdown::render('H:/Data/Cybio/CBC/CyBiDrops/BU_Script/Cybio_Drop_Calibration_v01.R')
# rmarkdown::render('H:/Data/Cybio/CBC/CyBiDrops/BU_Script/test.R')
library(rmarkdown)
rmarkdown::render('H:/Data/Cybio/CBC/CyBiDrops/BU_Script/Cybio_Drop_Calibration_v01.R')
# rmarkdown::render('H:/Data/Cybio/CBC/CyBiDrops/BU_Script/test.R')
library(rmarkdown)
rmarkdown::render('H:/Data/Cybio/CBC/CyBiDrops/BU_Script/Cybio_Drop_Calibration_v01.R')
# rmarkdown::render('H:/Data/Cybio/CBC/CyBiDrops/BU_Script/test.R')
all
knitr::kable(data2)
library(rmarkdown)
library(rmarkdown)
# rmarkdown::render('H:/Data/Cybio/CBC/CyBiDrops/BU_Script/Cybio_Drop_Calibration_v01.R')
rmarkdown::render('H:/Data/Cybio/CBC/CyBiDrops/BU_Script/test.R')
mtcars
library(rmarkdown)
# rmarkdown::render('H:/Data/Cybio/CBC/CyBiDrops/BU_Script/Cybio_Drop_Calibration_v01.R')
rmarkdown::render('H:/Data/Cybio/CBC/CyBiDrops/BU_Script/test.R')
library(rmarkdown)
# rmarkdown::render('H:/Data/Cybio/CBC/CyBiDrops/BU_Script/Cybio_Drop_Calibration_v01.R')
rmarkdown::render('H:/Data/Cybio/CBC/CyBiDrops/BU_Script/test.R')
library(rmarkdown)
rmarkdown::render('H:/Data/Cybio/CBC/CyBiDrops/BU_Script/Cybio_Drop_Calibration_v01.R')
# rmarkdown::render('H:/Data/Cybio/CBC/CyBiDrops/BU_Script/test.R')
kable(data2)
library(rmarkdown)
rmarkdown::render('H:/Data/Cybio/CBC/CyBiDrops/BU_Script/Cybio_Drop_Calibration_v01.R')
# rmarkdown::render('H:/Data/Cybio/CBC/CyBiDrops/BU_Script/test.R')
library(rmarkdown)
# rmarkdown::render('H:/Data/Cybio/CBC/CyBiDrops/BU_Script/Cybio_Drop_Calibration_v01.R')
rmarkdown::render('H:/Data/Cybio/CBC/CyBiDrops/BU_Script/test.R')
library(rmarkdown)
# rmarkdown::render('H:/Data/Cybio/CBC/CyBiDrops/BU_Script/Cybio_Drop_Calibration_v01.R')
rmarkdown::render('H:/Data/Cybio/CBC/CyBiDrops/BU_Script/test.R')
library(rmarkdown)
# rmarkdown::render('H:/Data/Cybio/CBC/CyBiDrops/BU_Script/Cybio_Drop_Calibration_v01.R')
rmarkdown::render('H:/Data/Cybio/CBC/CyBiDrops/BU_Script/test.R')
library(rmarkdown)
# rmarkdown::render('H:/Data/Cybio/CBC/CyBiDrops/BU_Script/Cybio_Drop_Calibration_v01.R')
rmarkdown::render('H:/Data/Cybio/CBC/CyBiDrops/BU_Script/test.R')
library(rmarkdown)
# rmarkdown::render('H:/Data/Cybio/CBC/CyBiDrops/BU_Script/Cybio_Drop_Calibration_v01.R')
rmarkdown::render('H:/Data/Cybio/CBC/CyBiDrops/BU_Script/test.R')
library(rmarkdown)
# rmarkdown::render('H:/Data/Cybio/CBC/CyBiDrops/BU_Script/Cybio_Drop_Calibration_v01.R')
rmarkdown::render('H:/Data/Cybio/CBC/CyBiDrops/BU_Script/test.R')
library(rmarkdown)
# rmarkdown::render('H:/Data/Cybio/CBC/CyBiDrops/BU_Script/Cybio_Drop_Calibration_v01.R')
rmarkdown::render('H:/Data/Cybio/CBC/CyBiDrops/BU_Script/test.R')
library(rmarkdown)
# rmarkdown::render('H:/Data/Cybio/CBC/CyBiDrops/BU_Script/Cybio_Drop_Calibration_v01.R')
rmarkdown::render('H:/Data/Cybio/CBC/CyBiDrops/BU_Script/test.R')
library(rmarkdown)
rmarkdown::render('H:/Data/Cybio/CBC/CyBiDrops/BU_Script/Cybio_Drop_Calibration_v01.R')
# rmarkdown::render('H:/Data/Cybio/CBC/CyBiDrops/BU_Script/test.R')
library(rmarkdown)
rmarkdown::render('H:/Data/Cybio/CBC/CyBiDrops/BU_Script/Cybio_Drop_Calibration_v01.R')
# rmarkdown::render('H:/Data/Cybio/CBC/CyBiDrops/BU_Script/test.R')
library(rmarkdown)
rmarkdown::render('H:/Data/Cybio/CBC/CyBiDrops/BU_Script/Cybio_Drop_Calibration_v01.R')
# rmarkdown::render('H:/Data/Cybio/CBC/CyBiDrops/BU_Script/test.R')
pandoc_available()
cat("pandoc", as.character(pandoc_version()), "is available!\n")
library(rmarkdown)
pandoc_available()
pandoc_version()
Sys.getenv("RSTUDIO_PANDOC")
library(rmarkdown)
Sys.setenv(RSTUDIO_PANDOC="C:/Program Files/Pandoc")
if (pandoc_available()) {
cat("pandoc", as.character(pandoc_version()), "is available!\n")
Sys.sleep(5)
} else {
cat("required version 1.12.3 of pandoc not available!\n")
}
rmarkdown::render('H:/Data/Cybio/CBC/CyBiDrops/BU_Script/Cybio_Drop_Calibration_v01.R')
library(rmarkdown)
Sys.setenv(RSTUDIO_PANDOC="C:/Program Files/Pandoc")
if (pandoc_available()) {
cat("pandoc", as.character(pandoc_version()), "is available!\n")
} else {
cat("required version 1.12.3 of pandoc not available!\n")
}
Sys.sleep(5)
rmarkdown::render('H:/Data/Cybio/CBC/CyBiDrops/BU_Script/Cybio_Drop_Calibration_v01.R')
Sys.sleep(10)
library(rmarkdown)
Sys.setenv(RSTUDIO_PANDOC="C:/Program Files/Pandoc")
if (pandoc_available()) {
cat("pandoc", as.character(pandoc_version()), "is available!\n")
} else {
cat("required version 1.12.3 of pandoc not available!\n")
}
# Sys.sleep(2)
rmarkdown::render('H:/Data/Cybio/CBC/CyBiDrops/BU_Script/Cybio_Drop_Calibration_v01.R')
Sys.sleep(10)
library(rmarkdown)
Sys.setenv(RSTUDIO_PANDOC="C:/Program Files/Pandoc")
if (pandoc_available()) {
cat("pandoc", as.character(pandoc_version()), "is available!\n")
} else {
cat("required version 1.12.3 of pandoc not available!\n")
}
# Sys.sleep(2)
rmarkdown::render('H:/Data/Cybio/CBC/CyBiDrops/BU_Script/Cybio_Drop_Calibration_v01.R')
library(rmarkdown)
Sys.setenv(RSTUDIO_PANDOC="C:/Program Files/Pandoc")
if (pandoc_available()) {
cat("pandoc", as.character(pandoc_version()), "is available!\n")
} else {
cat("required version 1.12.3 of pandoc not available!\n")
}
# Sys.sleep(2)
rmarkdown::render('H:/Data/Cybio/CBC/CyBiDrops/BU_Script/Cybio_Drop_Calibration_v01.R')
all
dcast.data.table(all, vol~Pump, value.var="value")
dcast.data.table(all, vol~Pump, value.var="value")
dcast.data.table(all, Vol~Pump, value.var="value")
uSolu
#' # ALL Value per solution
#+ echo=F
uSolu <- unique(temp3$Solution)
uSolu
library(rmarkdown)
Sys.setenv(RSTUDIO_PANDOC="C:/Program Files/Pandoc")
if (pandoc_available()) {
cat("pandoc", as.character(pandoc_version()), "is available!\n")
} else {
cat("required version 1.12.3 of pandoc not available!\n")
}
# Sys.sleep(2)
rmarkdown::render('H:/Data/Cybio/CBC/CyBiDrops/BU_Script/Cybio_Drop_Calibration_v01.R')
kable_styling
install.packages("kableExtra")
library(kableExtra)
library(rmarkdown)
Sys.setenv(RSTUDIO_PANDOC="C:/Program Files/Pandoc")
if (pandoc_available()) {
cat("pandoc", as.character(pandoc_version()), "is available!\n")
} else {
cat("required version 1.12.3 of pandoc not available!\n")
}
# Sys.sleep(2)
rmarkdown::render('H:/Data/Cybio/CBC/CyBiDrops/BU_Script/Cybio_Drop_Calibration_v01.R')
library(rmarkdown)
Sys.setenv(RSTUDIO_PANDOC="C:/Program Files/Pandoc")
if (pandoc_available()) {
cat("pandoc", as.character(pandoc_version()), "is available!\n")
} else {
cat("required version 1.12.3 of pandoc not available!\n")
}
# Sys.sleep(2)
rmarkdown::render('H:/Data/Cybio/CBC/CyBiDrops/BU_Script/Cybio_Drop_Calibration_v01.R')
library(rmarkdown)
Sys.setenv(RSTUDIO_PANDOC="C:/Program Files/Pandoc")
if (pandoc_available()) {
cat("pandoc", as.character(pandoc_version()), "is available!\n")
} else {
cat("required version 1.12.3 of pandoc not available!\n")
}
# Sys.sleep(2)
rmarkdown::render('H:/Data/Cybio/CBC/CyBiDrops/BU_Script/Cybio_Drop_Calibration_v01.R')
Rsc <- "H:/Data/R/Other_Standalone/Cybio/Cybio_Drop_Calibration_v01.R"
Rschtml <- gsub(".R", ".html", Rsc)
Rschtml
Rschtml <- paste0(substr(Rsc, 1, nchar(Rsc)-1), "html")
Rschtml
file.copy(Rschtml, paste0("H:/Data/Cybio/CBC/CyBiDrops/", basename(Rschtml)))
library(rmarkdown)
Sys.setenv(RSTUDIO_PANDOC="C:/Program Files/Pandoc")
if (pandoc_available()) {
cat("pandoc", as.character(pandoc_version()), "is available!\n")
} else {
cat("required version 1.12.3 of pandoc not available!\n")
}
# Sys.sleep(2)
Rsc <- "H:/Data/R/Other_Standalone/Cybio/test.R"
Rschtml <- paste0(substr(Rsc, 1, nchar(Rsc)-1), "html")
rmarkdown::render(Rsc)
library(rmarkdown)
Sys.setenv(RSTUDIO_PANDOC="C:/Program Files/Pandoc")
if (pandoc_available()) {
cat("pandoc", as.character(pandoc_version()), "is available!\n")
} else {
cat("required version 1.12.3 of pandoc not available!\n")
}
# Sys.sleep(2)
Rsc <- "H:/Data/R/Other_Standalone/Cybio/test.R"
Rschtml <- paste0(substr(Rsc, 1, nchar(Rsc)-1), "html")
rmarkdown::render(Rsc)
library(rmarkdown)
Sys.setenv(RSTUDIO_PANDOC="C:/Program Files/Pandoc")
if (pandoc_available()) {
cat("pandoc", as.character(pandoc_version()), "is available!\n")
} else {
cat("required version 1.12.3 of pandoc not available!\n")
}
# Sys.sleep(2)
Rsc <- "H:/Data/R/Other_Standalone/Cybio/test.R"
Rschtml <- paste0(substr(Rsc, 1, nchar(Rsc)-1), "html")
rmarkdown::render(Rsc)
library(rmarkdown)
Sys.setenv(RSTUDIO_PANDOC="C:/Program Files/Pandoc")
if (pandoc_available()) {
cat("pandoc", as.character(pandoc_version()), "is available!\n")
} else {
cat("required version 1.12.3 of pandoc not available!\n")
}
# Sys.sleep(2)
Rsc <- "H:/Data/R/Other_Standalone/Cybio/Cybio_Drop_Calibration_v01.R"
Rschtml <- paste0(substr(Rsc, 1, nchar(Rsc)-1), "html")
rmarkdown::render(Rsc)
file.copy(Rschtml, paste0("H:/Data/Cybio/CBC/CyBiDrops/", basename(Rschtml)))
paste0("H:/Data/Cybio/CBC/CyBiDrops/", basename(Rschtml))
Rschtml
file.copy(Rschtml, paste0("H:/Data/Cybio/CBC/CyBiDrops/", basename(Rschtml)), overwrite = T)
library(data.table)
wd <- "D:/DG-Papers/GitHub/Website/dorian.gravier.github.io/gpx"
exists(wd)
wd <- "D:/DG-Papers/GitHub/Website/dorian.gravier.github.io/gpx"
if( !exists(wd) ) {
wd <- "C:/Users/gravier/Downloads/GitHub/dorian.gravier.github.io/gpx"
}
setwd(wd)
lis <- data.table(path = list.files(wd, full = T, recursive = T))
lis[, path2 := gsub("D:/DG-Papers/GitHub/Website/dorian.gravier.github.io/", "", path) ]
lis[, dir := dirname(path2) ]
lisdir <- unique(lis$dir)
write("// create file", file = "Name_var_js-html_tocopy_in_leaflet.txt")
write("// create file", file = "Link_gpx_tocopy_in_leaflet.txt")
for(i in seq_along(lisdir)) {
if( basename(lisdir[i]) == "Project" ) {
varname <- paste0(basename(dirname(lisdir[i])), basename(lisdir[i]))
} else {
varname <- basename(lisdir[i])
}
lis2 <- lis[dir == lisdir[i]]
write(paste0("- ", varname), file = "Link_gpx_tocopy_in_leaflet.txt", append = T)
for( j in 1:nrow(lis2)) {
write(paste0("\t- ", lis2[j, path2], "\n"), file = "Link_gpx_tocopy_in_leaflet.txt", append = T)
}
}
for(i in seq_along(lisdir)) {
if( basename(lisdir[i]) == "Project" ) {
varname <- paste0(basename(dirname(lisdir[i])), basename(lisdir[i]))
} else {
varname <- basename(lisdir[i])
}
lis2 <- lis[dir == lisdir[i]]
for( j in 1:nrow(lis2)) {
if( j == 1) {
write(paste0("var ", varname, " = ['", lis2[j, path2], "',\n"), file = "Name_var_js-html_tocopy_in_leaflet.txt", append = T)
} else if( j == nrow(lis2)) {
write(paste0("'", lis2[j, path2], "']\n"), file = "Name_var_js-html_tocopy_in_leaflet.txt", append = T)
} else {
write(paste0("'", lis2[j, path2], "',"), file = "Name_var_js-html_tocopy_in_leaflet.txt", append = T)
}
}
}
write("// create file", file = "Link_gpx_tocopy_in_leaflet.txt")
for(i in seq_along(lisdir)) {
if( basename(lisdir[i]) == "Project" ) {
varname <- paste0(basename(dirname(lisdir[i])), basename(lisdir[i]))
} else {
varname <- basename(lisdir[i])
}
lis2 <- lis[dir == lisdir[i]]
write(paste0("- ", varname), file = "Link_gpx_tocopy_in_leaflet.txt", append = T)
for( j in 1:nrow(lis2)) {
write(paste0("\t- ", lis2[j, path2], ""), file = "Link_gpx_tocopy_in_leaflet.txt", append = T)
}
}
library(data.table)
wd <- "D:/DG-Papers/GitHub/Website/dorian.gravier.github.io/gpx"
if( !exists(wd) ) {
wd <- "C:/Users/gravier/Downloads/GitHub/dorian.gravier.github.io/gpx"
}
setwd(wd)
lis <- data.table(path = list.files(wd, full = T, recursive = T))
lis[, path2 := gsub(dirname(wd), "", path) ]
lis[, dir := dirname(path2) ]
lisdir <- unique(lis$dir)
write("// create file", file = "Name_var_js-html_tocopy_in_leaflet.txt")
for(i in seq_along(lisdir)) {
if( basename(lisdir[i]) == "Project" ) {
varname <- paste0(basename(dirname(lisdir[i])), basename(lisdir[i]))
} else {
varname <- basename(lisdir[i])
}
lis2 <- lis[dir == lisdir[i]]
for( j in 1:nrow(lis2)) {
if( j == 1) {
write(paste0("var ", varname, " = ['", lis2[j, path2], "',\n"), file = "Name_var_js-html_tocopy_in_leaflet.txt", append = T)
} else if( j == nrow(lis2)) {
write(paste0("'", lis2[j, path2], "']\n"), file = "Name_var_js-html_tocopy_in_leaflet.txt", append = T)
} else {
write(paste0("'", lis2[j, path2], "',"), file = "Name_var_js-html_tocopy_in_leaflet.txt", append = T)
}
}
}
write("// create file", file = "Link_gpx_tocopy_in_leaflet.txt")
for(i in seq_along(lisdir)) {
if( basename(lisdir[i]) == "Project" ) {
varname <- paste0(basename(dirname(lisdir[i])), basename(lisdir[i]))
} else {
varname <- basename(lisdir[i])
}
lis2 <- lis[dir == lisdir[i]]
write(paste0("- ", varname), file = "Link_gpx_tocopy_in_leaflet.txt", append = T)
for( j in 1:nrow(lis2)) {
write(paste0("\t- ", lis2[j, path2], ""), file = "Link_gpx_tocopy_in_leaflet.txt", append = T)
}
}
library(data.table)
wd <- "D:/DG-Papers/GitHub/Website/dorian.gravier.github.io/gpx/"
if( !exists(wd) ) {
wd <- "C:/Users/gravier/Downloads/GitHub/dorian.gravier.github.io/gpx/"
}
setwd(wd)
lis <- data.table(path = list.files(wd, full = T, recursive = T))
lis[, path2 := gsub(dirname(wd), "", path) ]
lis[, dir := dirname(path2) ]
lisdir <- unique(lis$dir)
write("// create file", file = "Name_var_js-html_tocopy_in_leaflet.txt")
for(i in seq_along(lisdir)) {
if( basename(lisdir[i]) == "Project" ) {
varname <- paste0(basename(dirname(lisdir[i])), basename(lisdir[i]))
} else {
varname <- basename(lisdir[i])
}
lis2 <- lis[dir == lisdir[i]]
for( j in 1:nrow(lis2)) {
if( j == 1) {
write(paste0("var ", varname, " = ['", lis2[j, path2], "',\n"), file = "Name_var_js-html_tocopy_in_leaflet.txt", append = T)
} else if( j == nrow(lis2)) {
write(paste0("'", lis2[j, path2], "']\n"), file = "Name_var_js-html_tocopy_in_leaflet.txt", append = T)
} else {
write(paste0("'", lis2[j, path2], "',"), file = "Name_var_js-html_tocopy_in_leaflet.txt", append = T)
}
}
}
write("// create file", file = "Link_gpx_tocopy_in_leaflet.txt")
for(i in seq_along(lisdir)) {
if( basename(lisdir[i]) == "Project" ) {
varname <- paste0(basename(dirname(lisdir[i])), basename(lisdir[i]))
} else {
varname <- basename(lisdir[i])
}
lis2 <- lis[dir == lisdir[i]]
write(paste0("- ", varname), file = "Link_gpx_tocopy_in_leaflet.txt", append = T)
for( j in 1:nrow(lis2)) {
write(paste0("\t- ", lis2[j, path2], ""), file = "Link_gpx_tocopy_in_leaflet.txt", append = T)
}
}
